{"version":3,"file":"aws-span-processing-util.js","sourceRoot":"","sources":["../../src/aws-span-processing-util.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAEtC,4CAAqH;AAIrH,8EAW6C;AAC7C,6DAA0D;AAC1D,qFAAwG;AACxG,uFAAuF;AAIvF,iFAAiF;AACjF,MAAa,qBAAqB;IA8BhC,MAAM,CAAC,kBAAkB;QACvB,OAAO,yBAAyB,CAAC,QAAQ,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,mBAAmB,CAAC,IAAkB;QAC3C,IAAI,SAAS,GAAW,IAAI,CAAC,IAAI,CAAC;QAClC,IAAI,qBAAqB,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE;YAC1D,SAAS,GAAG,qBAAqB,CAAC,kBAAkB,CAAC;SACtD;QACD,IAAI,IAAA,oDAAmB,GAAE,EAAE;YACzB,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,gEAA+B,CAAC,GAAG,kBAAkB,CAAC;SAC/E;aAAM,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;YACnE,SAAS,GAAG,qBAAqB,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;SAClE;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,IAAkB;QAC1C,IAAI,qBAAqB,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE;YAC1D,OAAO,qBAAqB,CAAC,kBAAkB,CAAC;SACjD;aAAM;YACL,MAAM,iBAAiB,GAA+B,IAAI,CAAC,UAAU,CAAC,uCAAkB,CAAC,mBAAmB,CAAC,CAAC;YAC9G,OAAO,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;SACnF;IACH,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,mBAAmB,CAAC,UAAqC;QAC9D,qEAAqE;QACrE,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,KAAK,EAAE,EAAE;YAC3C,OAAO,GAAG,CAAC;SACZ;QACD,8BAA8B;QAC9B,mKAAmK;QACnK,qEAAqE;QACrE,sCAAsC;QACtC,+DAA+D;QAC/D,sFAAsF;QACtF,qLAAqL;QACrL,sJAAsJ;QACtJ,8DAA8D;QAC9D,EAAE;QACF,0GAA0G;QAC1G,8IAA8I;QAC9I,EAAE;QACF,sFAAsF;QACtF,MAAM,KAAK,GAAa,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;SACvB;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,IAAkB,EAAE,GAAW;QACjD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,IAAkB;QACpC,MAAM,SAAS,GAA+B,IAAI,CAAC,UAAU,CAAC,0CAAmB,CAAC,CAAC;QAEnF,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,OAAO,KAAK,CAAC;SACd;QAED,iHAAiH;QACjH,OAAO,SAAS,KAAK,SAAS,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,qCAAqC,CAAC,IAAkB;QAC7D,OAAO,CACL,CAAC,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC;YACzG,cAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAC9B,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,wCAAwC,CAAC,IAAkB;QAChE,OAAO,CACL,cAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI;YAC7B,cAAQ,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI;YAC/B,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,IAAI,CAAC;gBACnD,CAAC,qBAAqB,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC,CAChE,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,qBAAqB,CAAC,QAAsB;QACjD,MAAM,kBAAkB,GAA+B,QAAQ,CAAC,UAAU,CAAC,mDAA4B,CAAC,CAAC;QACzG,IAAI,kBAAkB,KAAK,SAAS,EAAE;YACpC,OAAO,KAAK,CAAC;SACd;QAED,OAAO,cAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,IAAI,+CAAwB,CAAC,OAAO,KAAK,kBAAkB,CAAC;IACxG,CAAC;IAED,gGAAgG;IAChG,qBAAqB;IACrB,MAAM,CAAC,0BAA0B,CAAC,IAAkB;QAClD,OAAO,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,cAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC;IAClF,CAAC;IAED,kGAAkG;IAClG,yDAAyD;IACzD,MAAM,CAAC,WAAW,CAAC,QAAsB;QACvC,qFAAqF;QACrF,sFAAsF;QACtF,wEAAwE;QACxE,oEAAoE;QACpE,MAAM,WAAW,GAA+B,QAAQ,CAAC,UAAU,CAAC,uCAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC1G,IAAI,OAAO,WAAW,KAAK,SAAS,EAAE;YACpC,uFAAuF;YACvF,UAAI,CAAC,KAAK,CAAC,oFAAoF,CAAC,CAAC;YACjG,OAAO,IAAI,CAAC;SACb;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,yEAAyE;IACjE,MAAM,CAAC,+BAA+B,CAAC,QAAsB;QACnE,MAAM,QAAQ,GAAW,QAAQ,CAAC,IAAI,CAAC;QACvC,MAAM,QAAQ,GAAa,QAAQ,CAAC,IAAI,CAAC;QACzC,MAAM,kBAAkB,GAA+B,QAAQ,CAAC,UAAU,CAAC,mDAA4B,CAAC,CAAC;QAEzG,MAAM,sBAAsB,GAA2B,QAAQ,CAAC,sBAAsB,CAAC;QAEvF,OAAO,CACL,qBAAqB,CAAC,6BAA6B,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,WAAW,EAAE;YAC5F,cAAQ,CAAC,QAAQ,KAAK,QAAQ;YAC9B,sBAAsB,IAAI,IAAI;YAC9B,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,oCAAoC,CAAC;YAClG,CAAC,kBAAkB,KAAK,SAAS,IAAI,kBAAkB,KAAK,+CAAwB,CAAC,OAAO,CAAC,CAC9F,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,wBAAwB,CAAC,IAAkB;QACxD,IAAI,cAAQ,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,EAAE;YACnC,OAAO,KAAK,CAAC;SACd;aAAM,IAAI,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE;YAC5D,IAAI,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;gBAC3C,OAAO,IAAI,CAAC;aACb;YACD,MAAM,cAAc,GAClB,IAAI,CAAC,UAAU,CAAC,uCAAkB,CAAC,6BAA6B,CAAC,CAAC;YAEpE,OAAO,cAAQ,CAAC,cAAQ,CAAC,QAAQ,CAAC,KAAK,cAAc,CAAC;SACvD;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACK,MAAM,CAAC,gBAAgB,CAAC,IAAkB,EAAE,SAAiB;QACnE,IAAI,SAAS,IAAI,IAAI,IAAI,SAAS,KAAK,qBAAqB,CAAC,iBAAiB,EAAE;YAC9E,OAAO,KAAK,CAAC;SACd;QACD,IAAI,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,2CAAoB,CAAC,EAAE;YAClE,MAAM,UAAU,GAA+B,IAAI,CAAC,UAAU,CAAC,2CAAoB,CAAC,CAAC;YACrF,OAAO,SAAS,KAAK,UAAU,CAAC;SACjC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACK,MAAM,CAAC,wBAAwB,CAAC,IAAkB;QACxD,IAAI,SAAS,GAAW,qBAAqB,CAAC,iBAAiB,CAAC;QAChE,IAAI,QAAQ,GAA+B,SAAS,CAAC;QAErD,IAAI,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,2CAAoB,CAAC,EAAE;YAClE,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,2CAAoB,CAAC,CAAC;SAClD;aAAM,IAAI,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,wCAAiB,CAAC,EAAE;YACtE,MAAM,OAAO,GAA+B,IAAI,CAAC,UAAU,CAAC,wCAAiB,CAAC,CAAC;YAC/E,IAAI;gBACF,IAAI,GAAQ,CAAC;gBACb,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;oBAC/B,GAAG,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;oBACvB,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;iBACzB;aACF;YAAC,OAAO,CAAU,EAAE;gBACnB,6FAA6F;gBAC7F,2GAA2G;gBAC3G,UAAI,CAAC,OAAO,CAAC,+BAA+B,OAAO,oCAAoC,CAAC,CAAC;gBACzF,QAAQ,GAAG,EAAE,CAAC;aACf;SACF;QAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,2CAAoB,CAAC,EAAE;gBACjD,MAAM,UAAU,GAA+B,IAAI,CAAC,UAAU,CAAC,2CAAoB,CAAC,CAAC;gBACrF,IAAI,UAAU,KAAK,SAAS,EAAE;oBAC5B,SAAS,GAAG,UAAU,GAAG,GAAG,GAAG,SAAS,CAAC;iBAC1C;aACF;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,qEAAqE;IACrE,MAAM,CAAC,QAAQ,CAAC,IAAkB;QAChC,OAAO,CACL,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,yCAAkB,CAAC;YAC5D,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,4CAAqB,CAAC;YAC/D,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,4CAAqB,CAAC,CAChE,CAAC;IACJ,CAAC;IAED,8BAA8B;IAC9B,MAAM,CAAC,yBAAyB,CAAC,IAAU,EAAE,aAAsB;QACjE,MAAM,iBAAiB,GAA4B,WAAK,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QACvF,MAAM,wBAAwB,GAAY,iBAAiB,KAAK,SAAS,IAAI,IAAA,wBAAkB,EAAC,iBAAiB,CAAC,CAAC;QACnH,MAAM,kBAAkB,GAAY,iBAAiB,KAAK,SAAS,IAAI,iBAAiB,CAAC,QAAQ,KAAK,IAAI,CAAC;QAE3G,MAAM,WAAW,GAAY,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,CAAC,wBAAwB,IAAI,kBAAkB,CAAC;QAChH,IAAI,CAAC,YAAY,CAAC,uCAAkB,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;IACvE,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,IAAkB;QACrC,IAAI,UAAU,GAA+B,SAAS,CAAC;QACvD,IAAI,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,qBAAqB,CAAC,iBAAiB,CAAC,EAAE;YACrF,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;SACvE;aAAM,IAAI,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,0CAAmB,CAAC,EAAE;YACxE,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,0CAAmB,CAAC,CAAC;SACnD;QAED,OAAO,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;IACjE,CAAC;;AA7QH,sDA8QC;AA7QC,0EAA0E;AACnE,qCAAe,GAAW,gBAAgB,CAAC;AAC3C,uCAAiB,GAAW,kBAAkB,CAAC;AAC/C,4CAAsB,GAAW,sBAAsB,CAAC;AACxD,8CAAwB,GAAW,wBAAwB,CAAC;AAC5D,wCAAkB,GAAW,mBAAmB,CAAC;AACjD,gCAAU,GAAW,YAAY,CAAC;AAClC,mDAA6B,GAAW,oBAAoB,CAAC;AAC7D,0DAAoC,GAAW,wCAAwC,CAAC;AAC/F,mFAAmF;AACnF,yEAAyE;AAClE,uCAAiB,GAAW,mBAAmB,CAAC;AAEvD,mFAAmF;AACnF,oFAAoF;AACpF,iGAAiG;AAC1F,wCAAkB,GAAW,EAAE,CAAC;AAChC,yCAAmB,GAAW,MAAM,GAAG,qBAAqB,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;AAE5G,+CAA+C;AACxC,0CAAoB,GAAW,sBAAsB,CAAC;AACtD,mCAAa,GAAW,eAAe,CAAC;AACxC,+CAAyB,GAAW,2BAA2B,CAAC;AAChE,gDAA0B,GAAW,4BAA4B,CAAC;AAClE,0CAAoB,GAAW,sBAAsB,CAAC;AACtD,oDAA8B,GAAW,gCAAgC,CAAC;AAC1E,+CAAyB,GAAW,2BAA2B,CAAC;AAChE,gDAA0B,GAAW,4BAA4B,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AttributeValue, Context, SpanContext, SpanKind, diag, isSpanContextValid, trace } from '@opentelemetry/api';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { ReadableSpan, Span } from '@opentelemetry/sdk-trace-base';\n\nimport {\n  MessagingOperationValues,\n  SEMATTRS_DB_OPERATION,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_MESSAGING_OPERATION,\n  SEMATTRS_RPC_SYSTEM,\n  SEMRESATTRS_FAAS_ID,\n} from '@opentelemetry/semantic-conventions';\nimport { AWS_ATTRIBUTE_KEYS } from './aws-attribute-keys';\nimport { AWS_LAMBDA_FUNCTION_NAME_CONFIG, isLambdaEnvironment } from './aws-opentelemetry-configurator';\nimport * as SQL_DIALECT_KEYWORDS_JSON from './configuration/sql_dialect_keywords.json';\n\nexport type ForceFlushFunction = (options?: any) => Promise<void>;\n\n/** Utility class designed to support shared logic across AWS Span Processors. */\nexport class AwsSpanProcessingUtil {\n  // Default attribute values if no valid span attribute value is identified\n  static UNKNOWN_SERVICE: string = 'UnknownService';\n  static UNKNOWN_OPERATION: string = 'UnknownOperation';\n  static UNKNOWN_REMOTE_SERVICE: string = 'UnknownRemoteService';\n  static UNKNOWN_REMOTE_OPERATION: string = 'UnknownRemoteOperation';\n  static INTERNAL_OPERATION: string = 'InternalOperation';\n  static LOCAL_ROOT: string = 'LOCAL_ROOT';\n  static SQS_RECEIVE_MESSAGE_SPAN_NAME: string = 'Sqs.ReceiveMessage';\n  static AWS_SDK_INSTRUMENTATION_SCOPE_PREFIX: string = '@opentelemetry/instrumentation-aws-sdk';\n  // \"cloud.resource_id\" is defined in semconv which has not yet picked up by OTel JS\n  // https://opentelemetry.io/docs/specs/semconv/attributes-registry/cloud/\n  static CLOUD_RESOURCE_ID: string = 'cloud.resource_id';\n\n  // Max keyword length supported by parsing into remote_operation from DB_STATEMENT.\n  // The current longest command word is DATETIME_INTERVAL_PRECISION at 27 characters.\n  // If we add a longer keyword to the sql dialect keyword list, need to update the constant below.\n  static MAX_KEYWORD_LENGTH: number = 27;\n  static SQL_DIALECT_PATTERN: string = '^(?:' + AwsSpanProcessingUtil.getDialectKeywords().join('|') + ')\\\\b';\n\n  // TODO: Use Semantic Conventions once upgraded\n  static GEN_AI_REQUEST_MODEL: string = 'gen_ai.request.model';\n  static GEN_AI_SYSTEM: string = 'gen_ai.system';\n  static GEN_AI_REQUEST_MAX_TOKENS: string = 'gen_ai.request.max_tokens';\n  static GEN_AI_REQUEST_TEMPERATURE: string = 'gen_ai.request.temperature';\n  static GEN_AI_REQUEST_TOP_P: string = 'gen_ai.request.top_p';\n  static GEN_AI_RESPONSE_FINISH_REASONS: string = 'gen_ai.response.finish_reasons';\n  static GEN_AI_USAGE_INPUT_TOKENS: string = 'gen_ai.usage.input_tokens';\n  static GEN_AI_USAGE_OUTPUT_TOKENS: string = 'gen_ai.usage.output_tokens';\n\n  static getDialectKeywords(): string[] {\n    return SQL_DIALECT_KEYWORDS_JSON.keywords;\n  }\n\n  /**\n   * Ingress operation (i.e. operation for Server and Consumer spans) will be generated from\n   * \"http.method + http.target/with the first API path parameter\" if the default span name equals\n   * null, UnknownOperation or http.method value.\n   */\n  static getIngressOperation(span: ReadableSpan): string {\n    let operation: string = span.name;\n    if (AwsSpanProcessingUtil.shouldUseInternalOperation(span)) {\n      operation = AwsSpanProcessingUtil.INTERNAL_OPERATION;\n    }\n    if (isLambdaEnvironment()) {\n      operation = process.env[AWS_LAMBDA_FUNCTION_NAME_CONFIG] + '/FunctionHandler';\n    } else if (!AwsSpanProcessingUtil.isValidOperation(span, operation)) {\n      operation = AwsSpanProcessingUtil.generateIngressOperation(span);\n    }\n    return operation;\n  }\n\n  static getEgressOperation(span: ReadableSpan): string | undefined {\n    if (AwsSpanProcessingUtil.shouldUseInternalOperation(span)) {\n      return AwsSpanProcessingUtil.INTERNAL_OPERATION;\n    } else {\n      const awsLocalOperation: AttributeValue | undefined = span.attributes[AWS_ATTRIBUTE_KEYS.AWS_LOCAL_OPERATION];\n      return awsLocalOperation === undefined ? undefined : awsLocalOperation.toString();\n    }\n  }\n\n  /**\n   * Extract the first part from API http target if it exists\n   *\n   * @param httpTarget http request target string value. Eg, /payment/1234\n   * @return the first part from the http target. Eg, /payment\n   */\n  static extractAPIPathValue(httpTarget: string | undefined | null): string {\n    // In TypeScript, `httpTarget == null` checks both null and undefined\n    if (httpTarget == null || httpTarget === '') {\n      return '/';\n    }\n    // Divergence from Java/Python\n    // https://github.com/open-telemetry/semantic-conventions/blob/4e7c42ee8e4c3a39a899c4c85c64df28cd543f78/docs/attributes-registry/http.md#deprecated-http-attributes\n    // According to OTel Spec, httpTarget may include query and fragment:\n    // - `/search?q=OpenTelemetry#SemConv`\n    // We do NOT want the `?` or `#` parts, so let us strip it out,\n    // because HTTP (ingress) instrumentation was observed to include the query (`?`) part\n    // - https://github.com/open-telemetry/opentelemetry-js/blob/b418d36609c371d1fcae46898e9ede6278aca917/experimental/packages/opentelemetry-instrumentation-http/src/utils.ts#L502-L504\n    // According to RFC Specification, \"The path is terminated by the first question mark (\"?\") or number sign (\"#\") character, or by the end of the URI.\"\n    // - https://datatracker.ietf.org/doc/html/rfc3986#section-3.3\n    //\n    // This is a fix that can be applied here since this is the central location for generating API Path Value\n    // TODO: Possibly contribute fix to upstream for this diff between langauges. However, the current attribute value in JS is according to spec.\n    //\n    // Interestingly, according to Spec, Java/Python should be affected, but they are not.\n    const paths: string[] = httpTarget.split(/[/?#]/);\n    if (paths.length > 1) {\n      return '/' + paths[1];\n    }\n    return '/';\n  }\n\n  static isKeyPresent(span: ReadableSpan, key: string): boolean {\n    return span.attributes[key] !== undefined;\n  }\n\n  static isAwsSDKSpan(span: ReadableSpan): boolean {\n    const rpcSystem: AttributeValue | undefined = span.attributes[SEMATTRS_RPC_SYSTEM];\n\n    if (rpcSystem === undefined) {\n      return false;\n    }\n\n    // https://opentelemetry.io/docs/specs/otel/trace/semantic_conventions/instrumentation/aws-sdk/#common-attributes\n    return 'aws-api' === rpcSystem;\n  }\n\n  static shouldGenerateServiceMetricAttributes(span: ReadableSpan): boolean {\n    return (\n      (AwsSpanProcessingUtil.isLocalRoot(span) && !AwsSpanProcessingUtil.isSqsReceiveMessageConsumerSpan(span)) ||\n      SpanKind.SERVER === span.kind\n    );\n  }\n\n  static shouldGenerateDependencyMetricAttributes(span: ReadableSpan): boolean {\n    return (\n      SpanKind.CLIENT === span.kind ||\n      SpanKind.PRODUCER === span.kind ||\n      (AwsSpanProcessingUtil.isDependencyConsumerSpan(span) &&\n        !AwsSpanProcessingUtil.isSqsReceiveMessageConsumerSpan(span))\n    );\n  }\n\n  static isConsumerProcessSpan(spanData: ReadableSpan): boolean {\n    const messagingOperation: AttributeValue | undefined = spanData.attributes[SEMATTRS_MESSAGING_OPERATION];\n    if (messagingOperation === undefined) {\n      return false;\n    }\n\n    return SpanKind.CONSUMER === spanData.kind && MessagingOperationValues.PROCESS === messagingOperation;\n  }\n\n  // Any spans that are Local Roots and also not SERVER should have aws.local.operation renamed to\n  // InternalOperation.\n  static shouldUseInternalOperation(span: ReadableSpan): boolean {\n    return AwsSpanProcessingUtil.isLocalRoot(span) && SpanKind.SERVER !== span.kind;\n  }\n\n  // A span is a local root if it has no parent or if the parent is remote. This function checks the\n  // parent context and returns true if it is a local root.\n  static isLocalRoot(spanData: ReadableSpan): boolean {\n    // Workaround implemented for this function as parent span context is not obtainable.\n    // This isLocalRoot value is precalculated in AttributePropagatingSpanProcessor, which\n    // is started before the other processors (e.g. AwsSpanMetricsProcessor)\n    // Thus this function is implemented differently than in Java/Python\n    const isLocalRoot: AttributeValue | undefined = spanData.attributes[AWS_ATTRIBUTE_KEYS.AWS_IS_LOCAL_ROOT];\n    if (typeof isLocalRoot !== 'boolean') {\n      // isLocalRoot should be a precalculated boolean, this code block should not be entered\n      diag.debug('isLocalRoot for span has not been precalculated. Assuming span is Local Root Span.');\n      return true;\n    }\n    return isLocalRoot;\n  }\n\n  // To identify the SQS consumer spans produced by AWS SDK instrumentation\n  private static isSqsReceiveMessageConsumerSpan(spanData: ReadableSpan): boolean {\n    const spanName: string = spanData.name;\n    const spanKind: SpanKind = spanData.kind;\n    const messagingOperation: AttributeValue | undefined = spanData.attributes[SEMATTRS_MESSAGING_OPERATION];\n\n    const instrumentationLibrary: InstrumentationLibrary = spanData.instrumentationLibrary;\n\n    return (\n      AwsSpanProcessingUtil.SQS_RECEIVE_MESSAGE_SPAN_NAME.toLowerCase() === spanName.toLowerCase() &&\n      SpanKind.CONSUMER === spanKind &&\n      instrumentationLibrary != null &&\n      instrumentationLibrary.name.startsWith(AwsSpanProcessingUtil.AWS_SDK_INSTRUMENTATION_SCOPE_PREFIX) &&\n      (messagingOperation === undefined || messagingOperation === MessagingOperationValues.PROCESS)\n    );\n  }\n\n  private static isDependencyConsumerSpan(span: ReadableSpan): boolean {\n    if (SpanKind.CONSUMER !== span.kind) {\n      return false;\n    } else if (AwsSpanProcessingUtil.isConsumerProcessSpan(span)) {\n      if (AwsSpanProcessingUtil.isLocalRoot(span)) {\n        return true;\n      }\n      const parentSpanKind: AttributeValue | undefined =\n        span.attributes[AWS_ATTRIBUTE_KEYS.AWS_CONSUMER_PARENT_SPAN_KIND];\n\n      return SpanKind[SpanKind.CONSUMER] !== parentSpanKind;\n    }\n    return true;\n  }\n\n  /**\n   * When Span name is null, UnknownOperation or HttpMethod value, it will be treated as invalid\n   * local operation value that needs to be further processed\n   */\n  private static isValidOperation(span: ReadableSpan, operation: string): boolean {\n    if (operation == null || operation === AwsSpanProcessingUtil.UNKNOWN_OPERATION) {\n      return false;\n    }\n    if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_HTTP_METHOD)) {\n      const httpMethod: AttributeValue | undefined = span.attributes[SEMATTRS_HTTP_METHOD];\n      return operation !== httpMethod;\n    }\n    return true;\n  }\n\n  /**\n   * When span name is not meaningful(null, unknown or http_method value) as operation name for http\n   * use cases. Will try to extract the operation name from http target string\n   */\n  private static generateIngressOperation(span: ReadableSpan): string {\n    let operation: string = AwsSpanProcessingUtil.UNKNOWN_OPERATION;\n    let httpPath: AttributeValue | undefined = undefined;\n\n    if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_HTTP_TARGET)) {\n      httpPath = span.attributes[SEMATTRS_HTTP_TARGET];\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_HTTP_URL)) {\n      const httpUrl: AttributeValue | undefined = span.attributes[SEMATTRS_HTTP_URL];\n      try {\n        let url: URL;\n        if (typeof httpUrl === 'string') {\n          url = new URL(httpUrl);\n          httpPath = url.pathname;\n        }\n      } catch (e: unknown) {\n        // In Python, if `httpUrl == ''`, there is no error from URL parsing, and `url.pathname = ''`\n        // In TypeScript, this catch block will be invoked. Here `httpPath = ''` is set as default to match Python.\n        diag.verbose(`invalid http.url attribute: ${httpUrl}, setting httpPath as empty string`);\n        httpPath = '';\n      }\n    }\n\n    if (typeof httpPath === 'string') {\n      operation = this.extractAPIPathValue(httpPath);\n      if (this.isKeyPresent(span, SEMATTRS_HTTP_METHOD)) {\n        const httpMethod: AttributeValue | undefined = span.attributes[SEMATTRS_HTTP_METHOD];\n        if (httpMethod !== undefined) {\n          operation = httpMethod + ' ' + operation;\n        }\n      }\n    }\n\n    return operation;\n  }\n\n  // Check if the current Span adheres to database semantic conventions\n  static isDBSpan(span: ReadableSpan): boolean {\n    return (\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_DB_SYSTEM) ||\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_DB_OPERATION) ||\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_DB_STATEMENT)\n    );\n  }\n\n  // Divergence from Java/Python\n  static setIsLocalRootInformation(span: Span, parentContext: Context): void {\n    const parentSpanContext: SpanContext | undefined = trace.getSpanContext(parentContext);\n    const isParentSpanContextValid: boolean = parentSpanContext !== undefined && isSpanContextValid(parentSpanContext);\n    const isParentSpanRemote: boolean = parentSpanContext !== undefined && parentSpanContext.isRemote === true;\n\n    const isLocalRoot: boolean = span.parentSpanId === undefined || !isParentSpanContextValid || isParentSpanRemote;\n    span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_IS_LOCAL_ROOT, isLocalRoot);\n  }\n\n  static getResourceId(span: ReadableSpan): string | undefined {\n    let resourceId: AttributeValue | undefined = undefined;\n    if (AwsSpanProcessingUtil.isKeyPresent(span, AwsSpanProcessingUtil.CLOUD_RESOURCE_ID)) {\n      resourceId = span.attributes[AwsSpanProcessingUtil.CLOUD_RESOURCE_ID];\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, SEMRESATTRS_FAAS_ID)) {\n      resourceId = span.attributes[SEMRESATTRS_FAAS_ID];\n    }\n\n    return typeof resourceId === 'string' ? resourceId : undefined;\n  }\n}\n"]}