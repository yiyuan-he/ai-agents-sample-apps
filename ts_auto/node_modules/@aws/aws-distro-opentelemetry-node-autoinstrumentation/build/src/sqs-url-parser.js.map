{"version":3,"file":"sqs-url-parser.js","sourceRoot":"","sources":["../../src/sqs-url-parser.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAItC,MAAM,WAAW,GAAW,SAAS,CAAC;AACtC,MAAM,YAAY,GAAW,UAAU,CAAC;AAExC,yCAAyC;AACzC,sDAAsD;AACtD,MAAM,cAAc,GAAG,aAAa,CAAC;AAErC,MAAa,YAAY;IACvB;;;;;;OAMG;IACI,MAAM,CAAC,YAAY,CAAC,GAA+B;QACxD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,OAAO,SAAS,CAAC;SAClB;QACD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAa,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;YAChG,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;SACpB;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,MAAM,CAAC,WAAW,CAAC,KAAa;QACtC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE;YACxC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,MAAM,CAAC,YAAY,CAAC,GAAW;QACrC,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,KAAa;QAC3C,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,EAAE,EAAE;YAC5D,OAAO,KAAK,CAAC;SACd;QAED,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,MAAM,CAAC,GAAW,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE;gBAChF,OAAO,KAAK,CAAC;aACd;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAlDD,oCAkDC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AttributeValue } from '@opentelemetry/api';\n\nconst HTTP_SCHEMA: string = 'http://';\nconst HTTPS_SCHEMA: string = 'https://';\n\n// Cannot define type for regex variables\n// eslint-disable-next-line @typescript-eslint/typedef\nconst ALPHABET_REGEX = /^[a-zA-Z]+$/;\n\nexport class SqsUrlParser {\n  /**\n   * Best-effort logic to extract queue name from an HTTP url. This method should only be used with\n   * a string that is, with reasonably high confidence, an SQS queue URL. Handles new/legacy/some\n   * custom URLs. Essentially, we require that the URL should have exactly three parts, delimited by\n   * /'s (excluding schema), the second part should be a 12-digit account id, and the third part\n   * should be a valid queue name, per SQS naming conventions.\n   */\n  public static getQueueName(url: AttributeValue | undefined): string | undefined {\n    if (typeof url !== 'string') {\n      return undefined;\n    }\n    url = url.replace(HTTP_SCHEMA, '').replace(HTTPS_SCHEMA, '');\n    const splitUrl: string[] = url.split('/');\n    if (splitUrl.length === 3 && this.isAccountId(splitUrl[1]) && this.isValidQueueName(splitUrl[2])) {\n      return splitUrl[2];\n    }\n    return undefined;\n  }\n\n  private static isAccountId(input: string): boolean {\n    if (input == null || input.length !== 12) {\n      return false;\n    }\n\n    if (!this._checkDigits(input)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private static _checkDigits(str: string): boolean {\n    return /^\\d+$/.test(str);\n  }\n\n  private static isValidQueueName(input: string): boolean {\n    if (input == null || input.length === 0 || input.length > 80) {\n      return false;\n    }\n\n    for (let i: number = 0; i < input.length; i++) {\n      const c: string = input.charAt(i);\n      if (c !== '_' && c !== '-' && !ALPHABET_REGEX.test(c) && !(c >= '0' && c <= '9')) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"]}