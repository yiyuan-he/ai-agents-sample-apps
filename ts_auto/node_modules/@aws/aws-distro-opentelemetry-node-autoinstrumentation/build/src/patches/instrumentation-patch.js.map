{"version":3,"file":"instrumentation-patch.js","sourceRoot":"","sources":["../../../src/patches/instrumentation-patch.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAEtC,4CAa4B;AAQ5B,4EAAgG;AAEhG,8DAA2D;AAE3D,oDAKgC;AAChC,kEAA+E;AAC/E,kEAA8E;AAIjE,QAAA,0BAA0B,GAAG,kBAAkB,CAAC;AAC7D,MAAM,aAAa,GAAG,IAAI,uCAAiB,EAAE,CAAC;AACjC,QAAA,YAAY,GAA+C;IACtE,IAAI,CAAC,OAAY;QACf,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IACD,GAAG,CAAC,OAAY,EAAE,GAAW;QAC3B,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;CACF,CAAC;AAEF,SAAgB,2BAA2B,CAAC,gBAAmC;IAC7E;;;;;;;;MAQE;IACF,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,KAAK,EAAE,EAAE;;QAClD,IAAI,eAAe,CAAC,mBAAmB,KAAK,wCAAwC,EAAE;YACpF,UAAI,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YAC/C,0BAA0B,CAAC,eAAe,CAAC,CAAC;YAE5C,mEAAmE;YACnE,6DAA6D;YAC7D,aAAa;YACb,MAAM,QAAQ,GAA8C,MAAC,gBAAgB,CAAC,KAAK,CAAS,CAAC,kBAAkB,0CAC3G,QAAQ,CAAC;YACb,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,+CAA8B,EAAE,CAAC,CAAC;gBACrE,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,8CAA6B,EAAE,CAAC,CAAC;gBACzD,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,iCAAuB,EAAE,CAAC,CAAC;gBACvD,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,sCAA4B,EAAE,CAAC,CAAC;gBACjE,QAAQ,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,6CAAmC,EAAE,CAAC,CAAC;gBAC/E,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,wCAA8B,EAAE,CAAC,CAAC;gBACrE,wBAAwB,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC9C,wBAAwB,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC9C,2BAA2B,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;aACrD;SACF;aAAM,IAAI,eAAe,CAAC,mBAAmB,KAAK,2CAA2C,EAAE;YAC9F,UAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;YAClD,6BAA6B,CAAC,eAAe,CAAC,CAAC;SAChD;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AApCD,kEAoCC;AAED;;;;;;GAMG;AACI,MAAM,eAAe,GAAG,CAAC,KAAU,EAAE,eAAwB,EAAe,EAAE;;IACnF,IAAI,MAAM,GAA4B,SAAS,CAAC;IAChD,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,kCAA0B,CAAC,CAAC;IAClE,IAAI,iBAAiB,EAAE;QACrB,MAAM,GAAG,aAAa,CAAC,OAAO,CAC5B,aAAW,CAAC,MAAM,EAAE,EACpB,EAAE,CAAC,6CAAuB,CAAC,EAAE,iBAAiB,EAAE,EAChD,oBAAY,CACb,CAAC;KACH;IACD,IAAI,MAAM,EAAE;QACV,MAAM,WAAW,GAAG,MAAA,WAAK,CAAC,OAAO,CAAC,MAAM,CAAC,0CAAE,WAAW,EAAE,CAAC;QACzD,IAAI,WAAW,IAAI,IAAA,wBAAkB,EAAC,WAAW,CAAC,EAAE;YAClD,OAAO,MAAM,CAAC;SACf;KACF;IACD,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,MAAM,gBAAgB,GAAG,iBAAW,CAAC,OAAO,CAAC,aAAW,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,oBAAY,CAAC,CAAC;IAC9F,IAAI,MAAA,WAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,0CAAE,WAAW,EAAE,EAAE;QAClD,OAAO,gBAAgB,CAAC;KACzB;IACD,OAAO,kBAAY,CAAC;AACtB,CAAC,CAAC;AAtBW,QAAA,eAAe,mBAsB1B;AAEF;;;;;;;;;;GAUG;AACH,SAAS,wBAAwB,CAAC,mBAAwB;IACxD,6DAA6D;IAC7D,IAAI,mBAAmB,EAAE;QACvB,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,kBAAkB,CAAC;QAClE,6FAA6F;QAC7F,mBAAmB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC7D,+GAA+G;QAC/G,qCAAqC;QACrC,MAAM,yBAAyB,GAAG,CAChC,OAA0B,EAC1B,OAAoC,EACnB,EAAE;;YACnB,MAAM,eAAe,GAAoB,mBAAmB,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACnG,mHAAmH;YACnH,IAAI,eAAe,CAAC,cAAc,EAAE;gBAClC,IAAI,MAAA,OAAO,CAAC,YAAY,0CAAE,QAAQ,EAAE;oBAClC,eAAe,CAAC,cAAc,CAAC,uCAAkB,CAAC,iBAAiB,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC;iBACtG;gBACD,IAAI,MAAA,OAAO,CAAC,YAAY,0CAAE,SAAS,EAAE;oBACnC,eAAe,CAAC,cAAc,CAAC,uCAAkB,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC;iBACxG;aACF;YACD,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC;QACF,mBAAmB,CAAC,kBAAkB,GAAG,yBAAyB,CAAC;KACpE;AACH,CAAC;AAED;;;;;;;GAOG;AACH,SAAS,wBAAwB,CAAC,mBAAwB;IACxD,IAAI,mBAAmB,EAAE;QACvB,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,kBAAkB,CAAC;QAClE,mBAAmB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAE7D,MAAM,yBAAyB,GAAG,CAChC,OAA0B,EAC1B,OAAoC,EACnB,EAAE;;YACnB,MAAM,eAAe,GAAoB,mBAAmB,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACnG,IAAI,eAAe,CAAC,cAAc,EAAE;gBAClC,MAAM,QAAQ,GAAG,MAAA,OAAO,CAAC,YAAY,0CAAE,QAAQ,CAAC;gBAChD,IAAI,QAAQ,EAAE;oBACZ,eAAe,CAAC,cAAc,CAAC,uCAAkB,CAAC,iBAAiB,CAAC,GAAG,QAAQ,CAAC;iBACjF;aACF;YACD,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC;QAEF,mBAAmB,CAAC,kBAAkB,GAAG,yBAAyB,CAAC;KACpE;AACH,CAAC;AAED;;;;;;;GAOG;AACH,SAAS,2BAA2B,CAAC,sBAA2B;IAC9D,IAAI,sBAAsB,EAAE;QAC1B,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC;QACrE,sBAAsB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAEhE,MAAM,yBAAyB,GAAG,CAChC,OAA0B,EAC1B,OAAoC,EACnB,EAAE;;YACnB,MAAM,eAAe,GAAoB,sBAAsB,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACtG,IAAI,eAAe,CAAC,cAAc,EAAE;gBAClC,MAAM,iBAAiB,GAAG,MAAA,OAAO,CAAC,YAAY,0CAAE,IAAI,CAAC;gBACrD,IAAI,iBAAiB,EAAE;oBACrB,eAAe,CAAC,cAAc,CAAC,uCAAkB,CAAC,8BAA8B,CAAC,GAAG,iBAAiB,CAAC;iBACvG;gBAED,MAAM,yBAAyB,GAAG,MAAA,OAAO,CAAC,YAAY,0CAAE,YAAY,CAAC;gBACrE,IAAI,YAAY,GAAG,yBAAyB,CAAC;gBAE7C,IAAI,yBAAyB,EAAE;oBAC7B,IAAI,yBAAyB,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;wBAC1D,MAAM,KAAK,GAAG,yBAAyB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnD,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;qBACxC;oBACD,eAAe,CAAC,cAAc,CAAC,uCAAkB,CAAC,wBAAwB,CAAC,GAAG,YAAY,CAAC;iBAC5F;aACF;YACD,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC;QAEF,sBAAsB,CAAC,kBAAkB,GAAG,yBAAyB,CAAC;QAEtE,IAAI,OAAO,sBAAsB,CAAC,YAAY,KAAK,UAAU,EAAE;YAC7D,MAAM,oBAAoB,GAAG,sBAAsB,CAAC,YAAY,CAAC;YAEjE,sBAAsB,CAAC,YAAY,GAAG,CACpC,QAA4B,EAC5B,IAAU,EACV,MAAc,EACd,MAAmC,EAC7B,EAAE;gBACR,oBAAoB,CAAC,IAAI,CAAC,sBAAsB,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;gBAElF,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE;oBAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;oBAC5D,IAAI,WAAW,EAAE;wBACf,IAAI,CAAC,YAAY,CAAC,uCAAkB,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;qBAC5E;iBACF;YACH,CAAC,CAAC;SACH;KACF;AACH,CAAC;AAED,2GAA2G;AAC3G,8JAA8J;AAC9J,SAAS,6BAA6B,CAAC,eAAgC;IACrE,IAAI,eAAe,EAAE;QAClB,eAA4C,CAAC,UAAU,CAAC,GAAG,UAC1D,IAAU,EACV,GAAsC,EACtC,QAAoB;YAEpB,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;aAC3B;YAED,IAAI,UAAU,CAAC;YACf,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBAC3B,UAAU,GAAG,GAAG,CAAC;aAClB;iBAAM,IAAI,GAAG,EAAE;gBACd,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC;aAC1B;YACD,IAAI,UAAU,EAAE;gBACd,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,oBAAc,CAAC,KAAK;oBAC1B,OAAO,EAAE,UAAU;iBACpB,CAAC,CAAC;aACJ;YAED,IAAI,CAAC,GAAG,EAAE,CAAC;YAEX,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,IAAK,IAAY,CAAC,kBAAkB,EAAE;gBACpC,QAAQ,CAAC,IAAI,CAAE,IAAY,CAAC,kBAAkB,EAAE,CAAC,CAAC;aACnD;iBAAM;gBACL,UAAI,CAAC,KAAK,CACR,sGAAsG,CACvG,CAAC;aACH;YAED,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC,CAAC;KACH;AACH,CAAC;AAED,qIAAqI;AACrI,8KAA8K;AAC9K,MAAM,iBAAiB,GAAG,IAAI,uCAAiB,EAAE,CAAC;AAClD,MAAM,mCAAmC,GAAG,iBAAiB,CAAC;AAC9D,MAAM,oBAAoB,GAAG,MAAM,CAAC,qDAAqD,CAAC,CAAC;AAI3F,SAAS,0BAA0B,CAAC,eAAgC;IAClE,IAAI,eAAe,EAAE;QAClB,eAAsC,CAAC,6BAA6B,CAAC,GAAG,UACvE,QAA8C;YAE9C,OAAO,SAAS,IAAI,CAAY,OAAwB,EAAE,GAAG,IAAe;;gBAC1E,MAAA,IAAI,CAAC,eAAe,0CAAE,GAAG,CACvB,CAAC,IAAS,EAAE,OAAY,EAAE,EAAE,CAAC,KAAK,EAAE,cAAmB,EAAE,EAAE;oBACzD,iBAAiB,CAAC,MAAM,CAAC,aAAW,CAAC,MAAM,EAAE,EAAE,cAAc,CAAC,OAAO,CAAC,OAAO,EAAE,0BAAoB,CAAC,CAAC;oBACrG,oGAAoG;oBACpG,4DAA4D;oBAC5D,mHAAmH;oBACnH,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,mCAAmC,CAAC;wBACjE,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,6CAAuB,CAAC,CAAC;oBAC1D,OAAO,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,6CAAuB,CAAC,CAAC;oBAC/D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC1C,OAAO,MAAM,CAAC;gBAChB,CAAC,EACD;oBACE,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,kCAAkC;oBACxC,QAAQ,EAAE,IAAI;iBACf,CACF,CAAC;gBAEF,OAAO,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC5C,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC;QACJ,CAAC,CAAC;KACH;AACH,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  diag,\n  isSpanContextValid,\n  Context as OtelContext,\n  context as otelContext,\n  propagation,\n  ROOT_CONTEXT,\n  TextMapGetter,\n  trace,\n  Span,\n  Tracer,\n  SpanStatusCode,\n  defaultTextMapSetter,\n} from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport {\n  AwsInstrumentation,\n  AwsSdkInstrumentationConfig,\n  NormalizedRequest,\n  NormalizedResponse,\n} from '@opentelemetry/instrumentation-aws-sdk';\nimport { AWSXRAY_TRACE_ID_HEADER, AWSXRayPropagator } from '@opentelemetry/propagator-aws-xray';\nimport { APIGatewayProxyEventHeaders, Context } from 'aws-lambda';\nimport { AWS_ATTRIBUTE_KEYS } from '../aws-attribute-keys';\nimport { RequestMetadata } from '../third-party/otel/aws/services/ServiceExtension';\nimport {\n  BedrockAgentRuntimeServiceExtension,\n  BedrockAgentServiceExtension,\n  BedrockRuntimeServiceExtension,\n  BedrockServiceExtension,\n} from './aws/services/bedrock';\nimport { SecretsManagerServiceExtension } from './aws/services/secretsmanager';\nimport { StepFunctionsServiceExtension } from './aws/services/step-functions';\nimport { AwsLambdaInstrumentation } from '@opentelemetry/instrumentation-aws-lambda';\nimport type { Command as AwsV3Command } from '@aws-sdk/types';\n\nexport const traceContextEnvironmentKey = '_X_AMZN_TRACE_ID';\nconst awsPropagator = new AWSXRayPropagator();\nexport const headerGetter: TextMapGetter<APIGatewayProxyEventHeaders> = {\n  keys(carrier: any): string[] {\n    return Object.keys(carrier);\n  },\n  get(carrier: any, key: string) {\n    return carrier[key];\n  },\n};\n\nexport function applyInstrumentationPatches(instrumentations: Instrumentation[]): void {\n  /*\n  Apply patches to upstream instrumentation libraries.\n\n  This method is invoked to apply changes to upstream instrumentation libraries, typically when changes to upstream\n  are required on a timeline that cannot wait for upstream release. Generally speaking, patches should be short-term\n  local solutions that are comparable to long-term upstream solutions.\n\n  Where possible, automated testing should be run to catch upstream changes resulting in broken patches\n  */\n  instrumentations.forEach((instrumentation, index) => {\n    if (instrumentation.instrumentationName === '@opentelemetry/instrumentation-aws-sdk') {\n      diag.debug('Patching aws sdk instrumentation');\n      patchAwsSdkInstrumentation(instrumentation);\n\n      // Access private property servicesExtensions of AwsInstrumentation\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const services: Map<string, ServiceExtension> | undefined = (instrumentations[index] as any).servicesExtensions\n        ?.services;\n      if (services) {\n        services.set('SecretsManager', new SecretsManagerServiceExtension());\n        services.set('SFN', new StepFunctionsServiceExtension());\n        services.set('Bedrock', new BedrockServiceExtension());\n        services.set('BedrockAgent', new BedrockAgentServiceExtension());\n        services.set('BedrockAgentRuntime', new BedrockAgentRuntimeServiceExtension());\n        services.set('BedrockRuntime', new BedrockRuntimeServiceExtension());\n        patchSqsServiceExtension(services.get('SQS'));\n        patchSnsServiceExtension(services.get('SNS'));\n        patchLambdaServiceExtension(services.get('Lambda'));\n      }\n    } else if (instrumentation.instrumentationName === '@opentelemetry/instrumentation-aws-lambda') {\n      diag.debug('Patching aws lambda instrumentation');\n      patchAwsLambdaInstrumentation(instrumentation);\n    }\n  });\n}\n\n/*\n * This function `customExtractor` is used to extract SpanContext for AWS Lambda functions.\n * It first attempts to extract the trace context from the AWS X-Ray header, which is stored in the Lambda environment variables.\n * If a valid span context is extracted from the environment, it uses this as the parent context for the function's tracing.\n * If the X-Ray header is missing or invalid, it falls back to extracting trace context from the Lambda handler's event headers.\n * If neither approach succeeds, it defaults to using the root Otel context, ensuring the function is still instrumented for tracing.\n */\nexport const customExtractor = (event: any, _handlerContext: Context): OtelContext => {\n  let parent: OtelContext | undefined = undefined;\n  const lambdaTraceHeader = process.env[traceContextEnvironmentKey];\n  if (lambdaTraceHeader) {\n    parent = awsPropagator.extract(\n      otelContext.active(),\n      { [AWSXRAY_TRACE_ID_HEADER]: lambdaTraceHeader },\n      headerGetter\n    );\n  }\n  if (parent) {\n    const spanContext = trace.getSpan(parent)?.spanContext();\n    if (spanContext && isSpanContextValid(spanContext)) {\n      return parent;\n    }\n  }\n  const httpHeaders = event.headers || {};\n  const extractedContext = propagation.extract(otelContext.active(), httpHeaders, headerGetter);\n  if (trace.getSpan(extractedContext)?.spanContext()) {\n    return extractedContext;\n  }\n  return ROOT_CONTEXT;\n};\n\n/*\n * This patch extends the existing upstream extension for SQS. Extensions allow for custom logic for adding\n * service-specific information to spans, such as attributes. Specifically, we are adding logic to add\n * `aws.sqs.queue.url` and `aws.sqs.queue.name` attributes, to be used to generate RemoteTarget and achieve parity\n * with the Java/Python instrumentation.\n *\n * Callout that today, the upstream logic adds `messaging.url` and `messaging.destination` but we feel that\n * `aws.sqs` is more in line with existing AWS Semantic Convention attributes like `AWS_S3_BUCKET`, etc.\n *\n * @param sqsServiceExtension SQS Service Extension obtained the service extension list from the AWS SDK OTel Instrumentation\n */\nfunction patchSqsServiceExtension(sqsServiceExtension: any): void {\n  // It is not expected that `sqsServiceExtension` is undefined\n  if (sqsServiceExtension) {\n    const requestPreSpanHook = sqsServiceExtension.requestPreSpanHook;\n    // Save original `requestPreSpanHook` under a similar name, to be invoked by the patched hook\n    sqsServiceExtension._requestPreSpanHook = requestPreSpanHook;\n    // The patched hook will populate the 'aws.sqs.queue.url' and 'aws.sqs.queue.name' attributes according to spec\n    // from the 'messaging.url' attribute\n    const patchedRequestPreSpanHook = (\n      request: NormalizedRequest,\n      _config: AwsSdkInstrumentationConfig\n    ): RequestMetadata => {\n      const requestMetadata: RequestMetadata = sqsServiceExtension._requestPreSpanHook(request, _config);\n      // It is not expected that `requestMetadata.spanAttributes` can possibly be undefined, but still be careful anyways\n      if (requestMetadata.spanAttributes) {\n        if (request.commandInput?.QueueUrl) {\n          requestMetadata.spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_SQS_QUEUE_URL] = request.commandInput.QueueUrl;\n        }\n        if (request.commandInput?.QueueName) {\n          requestMetadata.spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_SQS_QUEUE_NAME] = request.commandInput.QueueName;\n        }\n      }\n      return requestMetadata;\n    };\n    sqsServiceExtension.requestPreSpanHook = patchedRequestPreSpanHook;\n  }\n}\n\n/*\n * This patch extends the existing upstream extension for SNS. Extensions allow for custom logic for adding\n * service-specific information to spans, such as attributes. Specifically, we are adding logic to add\n * `aws.sns.topic.arn` attribute, to be used to generate RemoteTarget and achieve parity with the Java/Python instrumentation.\n *\n *\n * @param snsServiceExtension SNS Service Extension obtained the service extension list from the AWS SDK OTel Instrumentation\n */\nfunction patchSnsServiceExtension(snsServiceExtension: any): void {\n  if (snsServiceExtension) {\n    const requestPreSpanHook = snsServiceExtension.requestPreSpanHook;\n    snsServiceExtension._requestPreSpanHook = requestPreSpanHook;\n\n    const patchedRequestPreSpanHook = (\n      request: NormalizedRequest,\n      _config: AwsSdkInstrumentationConfig\n    ): RequestMetadata => {\n      const requestMetadata: RequestMetadata = snsServiceExtension._requestPreSpanHook(request, _config);\n      if (requestMetadata.spanAttributes) {\n        const topicArn = request.commandInput?.TopicArn;\n        if (topicArn) {\n          requestMetadata.spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_SNS_TOPIC_ARN] = topicArn;\n        }\n      }\n      return requestMetadata;\n    };\n\n    snsServiceExtension.requestPreSpanHook = patchedRequestPreSpanHook;\n  }\n}\n\n/*\n * This patch extends the existing upstream extension for Lambda. Extensions allow for custom logic for adding\n * service-specific information to spans, such as attributes. Specifically, we are adding logic to add\n * `aws.lambda.resource_mapping.id` attribute, to be used to generate RemoteTarget and achieve parity with the Java/Python instrumentation.\n *\n *\n * @param lambdaServiceExtension Lambda Service Extension obtained the service extension list from the AWS SDK OTel Instrumentation\n */\nfunction patchLambdaServiceExtension(lambdaServiceExtension: any): void {\n  if (lambdaServiceExtension) {\n    const requestPreSpanHook = lambdaServiceExtension.requestPreSpanHook;\n    lambdaServiceExtension._requestPreSpanHook = requestPreSpanHook;\n\n    const patchedRequestPreSpanHook = (\n      request: NormalizedRequest,\n      _config: AwsSdkInstrumentationConfig\n    ): RequestMetadata => {\n      const requestMetadata: RequestMetadata = lambdaServiceExtension._requestPreSpanHook(request, _config);\n      if (requestMetadata.spanAttributes) {\n        const resourceMappingId = request.commandInput?.UUID;\n        if (resourceMappingId) {\n          requestMetadata.spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_RESOURCE_MAPPING_ID] = resourceMappingId;\n        }\n\n        const requestFunctionNameFormat = request.commandInput?.FunctionName;\n        let functionName = requestFunctionNameFormat;\n\n        if (requestFunctionNameFormat) {\n          if (requestFunctionNameFormat.startsWith('arn:aws:lambda')) {\n            const split = requestFunctionNameFormat.split(':');\n            functionName = split[split.length - 1];\n          }\n          requestMetadata.spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_FUNCTION_NAME] = functionName;\n        }\n      }\n      return requestMetadata;\n    };\n\n    lambdaServiceExtension.requestPreSpanHook = patchedRequestPreSpanHook;\n\n    if (typeof lambdaServiceExtension.responseHook === 'function') {\n      const originalResponseHook = lambdaServiceExtension.responseHook;\n\n      lambdaServiceExtension.responseHook = (\n        response: NormalizedResponse,\n        span: Span,\n        tracer: Tracer,\n        config: AwsSdkInstrumentationConfig\n      ): void => {\n        originalResponseHook.call(lambdaServiceExtension, response, span, tracer, config);\n\n        if (response.data && response.data.Configuration) {\n          const functionArn = response.data.Configuration.FunctionArn;\n          if (functionArn) {\n            span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_FUNCTION_ARN, functionArn);\n          }\n        }\n      };\n    }\n  }\n}\n\n// Override the upstream private _endSpan method to remove the unnecessary metric force-flush error message\n// https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/node/opentelemetry-instrumentation-aws-lambda/src/instrumentation.ts#L358-L398\nfunction patchAwsLambdaInstrumentation(instrumentation: Instrumentation): void {\n  if (instrumentation) {\n    (instrumentation as AwsLambdaInstrumentation)['_endSpan'] = function (\n      span: Span,\n      err: string | Error | null | undefined,\n      callback: () => void\n    ) {\n      if (err) {\n        span.recordException(err);\n      }\n\n      let errMessage;\n      if (typeof err === 'string') {\n        errMessage = err;\n      } else if (err) {\n        errMessage = err.message;\n      }\n      if (errMessage) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: errMessage,\n        });\n      }\n\n      span.end();\n\n      const flushers = [];\n      if ((this as any)._traceForceFlusher) {\n        flushers.push((this as any)._traceForceFlusher());\n      } else {\n        diag.error(\n          'Spans may not be exported for the lambda function because we are not force flushing before callback.'\n        );\n      }\n\n      Promise.all(flushers).then(callback, callback);\n    };\n  }\n}\n\n// Override the upstream private _getV3SmithyClientSendPatch method to add middleware to inject X-Ray Trace Context into HTTP Headers\n// https://github.com/open-telemetry/opentelemetry-js-contrib/blob/instrumentation-aws-sdk-v0.48.0/plugins/node/opentelemetry-instrumentation-aws-sdk/src/aws-sdk.ts#L373-L384\nconst awsXrayPropagator = new AWSXRayPropagator();\nconst AWSXRAY_TRACE_ID_HEADER_CAPITALIZED = 'X-Amzn-Trace-Id';\nconst V3_CLIENT_CONFIG_KEY = Symbol('opentelemetry.instrumentation.aws-sdk.client.config');\ntype V3PluginCommand = AwsV3Command<any, any, any, any, any> & {\n  [V3_CLIENT_CONFIG_KEY]?: any;\n};\nfunction patchAwsSdkInstrumentation(instrumentation: Instrumentation): void {\n  if (instrumentation) {\n    (instrumentation as AwsInstrumentation)['_getV3SmithyClientSendPatch'] = function (\n      original: (...args: unknown[]) => Promise<any>\n    ) {\n      return function send(this: any, command: V3PluginCommand, ...args: unknown[]): Promise<any> {\n        this.middlewareStack?.add(\n          (next: any, context: any) => async (middlewareArgs: any) => {\n            awsXrayPropagator.inject(otelContext.active(), middlewareArgs.request.headers, defaultTextMapSetter);\n            // Need to set capitalized version of the trace id to ensure that the Recursion Detection Middleware\n            // of aws-sdk-js-v3 will detect the propagated X-Ray Context\n            // See: https://github.com/aws/aws-sdk-js-v3/blob/v3.768.0/packages/middleware-recursion-detection/src/index.ts#L13\n            middlewareArgs.request.headers[AWSXRAY_TRACE_ID_HEADER_CAPITALIZED] =\n              middlewareArgs.request.headers[AWSXRAY_TRACE_ID_HEADER];\n            delete middlewareArgs.request.headers[AWSXRAY_TRACE_ID_HEADER];\n            const result = await next(middlewareArgs);\n            return result;\n          },\n          {\n            step: 'build',\n            name: '_adotInjectXrayContextMiddleware',\n            override: true,\n          }\n        );\n\n        command[V3_CLIENT_CONFIG_KEY] = this.config;\n        return original.apply(this, [command, ...args]);\n      };\n    };\n  }\n}\n"]}