{"version":3,"file":"bedrock.js","sourceRoot":"","sources":["../../../../../src/patches/aws/services/bedrock.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Attributes, DiagLogger, Span, SpanKind, Tracer } from '@opentelemetry/api';\nimport {\n  AwsSdkInstrumentationConfig,\n  NormalizedRequest,\n  NormalizedResponse,\n} from '@opentelemetry/instrumentation-aws-sdk';\nimport { AWS_ATTRIBUTE_KEYS } from '../../../aws-attribute-keys';\nimport { RequestMetadata, ServiceExtension } from '../../../third-party/otel/aws/services/ServiceExtension';\nimport { AwsSpanProcessingUtil } from '../../../aws-span-processing-util';\n\nconst AGENT_ID: string = 'agentId';\nconst KNOWLEDGE_BASE_ID: string = 'knowledgeBaseId';\nconst DATA_SOURCE_ID: string = 'dataSourceId';\nconst GUARDRAIL_ID: string = 'guardrailId';\nconst GUARDRAIL_ARN: string = 'guardrailArn';\nconst MODEL_ID: string = 'modelId';\nconst AWS_BEDROCK_SYSTEM: string = 'aws.bedrock';\n\nconst AGENT_OPERATIONS = [\n  'CreateAgentActionGroup',\n  'CreateAgentAlias',\n  'DeleteAgentActionGroup',\n  'DeleteAgentAlias',\n  'DeleteAgent',\n  'DeleteAgentVersion',\n  'GetAgentActionGroup',\n  'GetAgentAlias',\n  'GetAgent',\n  'GetAgentVersion',\n  'ListAgentActionGroups',\n  'ListAgentAliases',\n  'ListAgentKnowledgeBases',\n  'ListAgentVersions',\n  'PrepareAgent',\n  'UpdateAgentActionGroup',\n  'UpdateAgentAlias',\n  'UpdateAgent',\n];\n\nconst KNOWLEDGE_BASE_OPERATIONS = [\n  'AssociateAgentKnowledgeBase',\n  'CreateDataSource',\n  'DeleteKnowledgeBase',\n  'DisassociateAgentKnowledgeBase',\n  'GetAgentKnowledgeBase',\n  'GetKnowledgeBase',\n  'ListDataSources',\n  'UpdateAgentKnowledgeBase',\n];\n\nconst DATA_SOURCE_OPERATIONS = ['DeleteDataSource', 'GetDataSource', 'UpdateDataSource'];\n\n// The following constants map the way we present the data in telemetry to how they appear in request/responses\n// e.g. we put `aws.bedrock.knowledge_base.id` into trace data by finding `knowledgeBaseId`\nconst agentOperationAttributeKeyMapping = { [AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_AGENT_ID]: AGENT_ID };\nconst knowledgeBaseOperationAttributeKeyMapping = {\n  [AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_KNOWLEDGE_BASE_ID]: KNOWLEDGE_BASE_ID,\n};\nconst dataSourceOperationAttributeKeyMapping = {\n  [AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_DATA_SOURCE_ID]: DATA_SOURCE_ID,\n  [AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_KNOWLEDGE_BASE_ID]: KNOWLEDGE_BASE_ID,\n};\n\n// This map allows us to get all relevant attribute key mappings for a given operation\nconst operationToBedrockAgentAttributesMap: { [key: string]: { [key: string]: string } } = {};\nfor (const operation of AGENT_OPERATIONS) {\n  operationToBedrockAgentAttributesMap[operation] = agentOperationAttributeKeyMapping;\n}\nfor (const operation of KNOWLEDGE_BASE_OPERATIONS) {\n  operationToBedrockAgentAttributesMap[operation] = knowledgeBaseOperationAttributeKeyMapping;\n}\nfor (const operation of DATA_SOURCE_OPERATIONS) {\n  operationToBedrockAgentAttributesMap[operation] = dataSourceOperationAttributeKeyMapping;\n}\n\n// This class is an extension for <a\n// href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_Operations_Agents_for_Amazon_Bedrock.html\">\n// Agents for Amazon Bedrock</a>.\n// This class primarily identify three types of resource based operations: AGENT_OPERATIONS,\n// KNOWLEDGE_BASE_OPERATIONS, and DATA_SOURCE_OPERATIONS. We only support operations that are related to\n// the resource and where the context contains the resource ID.\nexport class BedrockAgentServiceExtension implements ServiceExtension {\n  requestPreSpanHook(\n    request: NormalizedRequest,\n    config: AwsSdkInstrumentationConfig,\n    diag: DiagLogger\n  ): RequestMetadata {\n    const spanAttributes: Attributes = {};\n    const isIncoming = false;\n    const spanKind: SpanKind = SpanKind.CLIENT;\n    let spanName: string | undefined;\n\n    const operation: string = request.commandName;\n    if (operation && operationToBedrockAgentAttributesMap[operation]) {\n      const bedrockAgentServiceInfo = operationToBedrockAgentAttributesMap[operation];\n      for (const serviceInfo of Object.entries(bedrockAgentServiceInfo)) {\n        const [attributeKey, requestParamKey] = serviceInfo;\n        const requestParamValue = request.commandInput?.[requestParamKey];\n\n        if (requestParamValue) {\n          spanAttributes[attributeKey] = requestParamValue;\n        }\n      }\n    }\n\n    return {\n      isIncoming,\n      spanAttributes,\n      spanKind,\n      spanName,\n    };\n  }\n\n  responseHook(response: NormalizedResponse, span: Span, tracer: Tracer, config: AwsSdkInstrumentationConfig): void {\n    const operation: string = response.request.commandName;\n    if (operation && operationToBedrockAgentAttributesMap[operation]) {\n      const bedrockAgentServiceInfo = operationToBedrockAgentAttributesMap[operation];\n      for (const serviceInfo of Object.entries(bedrockAgentServiceInfo)) {\n        const [attributeKey, responseParamKey] = serviceInfo;\n        const responseParamValue = response.data[responseParamKey];\n\n        if (responseParamValue) {\n          span.setAttribute(attributeKey, responseParamValue);\n        }\n      }\n    }\n  }\n}\n\n// This class is an extension for <a\n// href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_Operations_Agents_for_Amazon_Bedrock_Runtime.html\">\n// Agents for Amazon Bedrock Runtime</a>.\nexport class BedrockAgentRuntimeServiceExtension implements ServiceExtension {\n  requestPreSpanHook(\n    request: NormalizedRequest,\n    config: AwsSdkInstrumentationConfig,\n    diag: DiagLogger\n  ): RequestMetadata {\n    const spanAttributes: Attributes = {};\n    const isIncoming = false;\n    const spanKind: SpanKind = SpanKind.CLIENT;\n    let spanName: string | undefined;\n\n    const agentId = request.commandInput?.[AGENT_ID];\n    const knowledgeBaseId = request.commandInput?.[KNOWLEDGE_BASE_ID];\n\n    if (agentId) {\n      spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_AGENT_ID] = agentId;\n    }\n    if (knowledgeBaseId) {\n      spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_KNOWLEDGE_BASE_ID] = knowledgeBaseId;\n    }\n\n    return {\n      isIncoming,\n      spanAttributes,\n      spanKind,\n      spanName,\n    };\n  }\n}\n\n// This class is an extension for <a\n// href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_Operations_Amazon_Bedrock.html\">Bedrock</a>.\nexport class BedrockServiceExtension implements ServiceExtension {\n  // Must be implemented, returning empty metadata\n  requestPreSpanHook(\n    request: NormalizedRequest,\n    config: AwsSdkInstrumentationConfig,\n    diag: DiagLogger\n  ): RequestMetadata {\n    const spanAttributes: Attributes = {};\n    const isIncoming = false;\n    const spanKind: SpanKind = SpanKind.CLIENT;\n    let spanName: string | undefined;\n    return {\n      isIncoming,\n      spanAttributes,\n      spanKind,\n      spanName,\n    };\n  }\n  responseHook(response: NormalizedResponse, span: Span, tracer: Tracer, config: AwsSdkInstrumentationConfig): void {\n    const guardrailId = response.data[GUARDRAIL_ID];\n    const guardrailArn = response.data[GUARDRAIL_ARN];\n\n    if (guardrailId) {\n      span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_GUARDRAIL_ID, guardrailId);\n    }\n\n    if (guardrailArn) {\n      span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_GUARDRAIL_ARN, guardrailArn);\n    }\n  }\n}\n\n// This class is an extension for <a\n// href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_Operations_Amazon_Bedrock_Runtime.html\">\n// Amazon Bedrock Runtime</a>.\nexport class BedrockRuntimeServiceExtension implements ServiceExtension {\n  requestPreSpanHook(\n    request: NormalizedRequest,\n    config: AwsSdkInstrumentationConfig,\n    diag: DiagLogger\n  ): RequestMetadata {\n    const spanAttributes: Attributes = {};\n    const isIncoming = false;\n    const spanKind: SpanKind = SpanKind.CLIENT;\n    let spanName: string | undefined;\n\n    const modelId = request.commandInput?.[MODEL_ID];\n\n    spanAttributes[AwsSpanProcessingUtil.GEN_AI_SYSTEM] = AWS_BEDROCK_SYSTEM;\n    if (modelId) {\n      spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MODEL] = modelId;\n    }\n\n    if (request.commandInput?.body) {\n      const requestBody = JSON.parse(request.commandInput.body);\n      if (modelId.includes('amazon.titan')) {\n        if (requestBody.textGenerationConfig?.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] =\n            requestBody.textGenerationConfig.temperature;\n        }\n        if (requestBody.textGenerationConfig?.topP !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.textGenerationConfig.topP;\n        }\n        if (requestBody.textGenerationConfig?.maxTokenCount !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] =\n            requestBody.textGenerationConfig.maxTokenCount;\n        }\n      } else if (modelId.includes('amazon.nova')) {\n        if (requestBody.inferenceConfig?.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] = requestBody.inferenceConfig.temperature;\n        }\n        if (requestBody.inferenceConfig?.top_p !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.inferenceConfig.top_p;\n        }\n        if (requestBody.inferenceConfig?.max_new_tokens !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] = requestBody.inferenceConfig.max_new_tokens;\n        }\n      } else if (modelId.includes('anthropic.claude')) {\n        if (requestBody.max_tokens !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] = requestBody.max_tokens;\n        }\n        if (requestBody.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] = requestBody.temperature;\n        }\n        if (requestBody.top_p !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.top_p;\n        }\n      } else if (modelId.includes('meta.llama')) {\n        if (requestBody.max_gen_len !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] = requestBody.max_gen_len;\n        }\n        if (requestBody.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] = requestBody.temperature;\n        }\n        if (requestBody.top_p !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.top_p;\n        }\n      } else if (modelId.includes('cohere.command-r')) {\n        if (requestBody.max_tokens !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] = requestBody.max_tokens;\n        }\n        if (requestBody.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] = requestBody.temperature;\n        }\n        if (requestBody.p !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.p;\n        }\n        if (requestBody.message !== undefined) {\n          // NOTE: We approximate the token count since this value is not directly available in the body\n          // According to Bedrock docs they use (total_chars / 6) to approximate token count for pricing.\n          // https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-prepare.html\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS] = Math.ceil(requestBody.message.length / 6);\n        }\n      } else if (modelId.includes('cohere.command')) {\n        if (requestBody.max_tokens !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] = requestBody.max_tokens;\n        }\n        if (requestBody.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] = requestBody.temperature;\n        }\n        if (requestBody.p !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.p;\n        }\n        if (requestBody.prompt !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS] = Math.ceil(requestBody.prompt.length / 6);\n        }\n      } else if (modelId.includes('ai21.jamba')) {\n        if (requestBody.max_tokens !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] = requestBody.max_tokens;\n        }\n        if (requestBody.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] = requestBody.temperature;\n        }\n        if (requestBody.top_p !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.top_p;\n        }\n      } else if (modelId.includes('mistral')) {\n        if (requestBody.prompt !== undefined) {\n          // NOTE: We approximate the token count since this value is not directly available in the body\n          // According to Bedrock docs they use (total_chars / 6) to approximate token count for pricing.\n          // https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-prepare.html\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS] = Math.ceil(requestBody.prompt.length / 6);\n        }\n        if (requestBody.max_tokens !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MAX_TOKENS] = requestBody.max_tokens;\n        }\n        if (requestBody.temperature !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TEMPERATURE] = requestBody.temperature;\n        }\n        if (requestBody.top_p !== undefined) {\n          spanAttributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_TOP_P] = requestBody.top_p;\n        }\n      }\n    }\n\n    return {\n      isIncoming,\n      spanAttributes,\n      spanKind,\n      spanName,\n    };\n  }\n\n  responseHook(response: NormalizedResponse, span: Span, tracer: Tracer, config: AwsSdkInstrumentationConfig): void {\n    const currentModelId = response.request.commandInput?.modelId;\n    if (response.data?.body) {\n      const decodedResponseBody = new TextDecoder().decode(response.data.body);\n      const responseBody = JSON.parse(decodedResponseBody);\n      if (currentModelId.includes('amazon.titan')) {\n        if (responseBody.inputTextTokenCount !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS, responseBody.inputTextTokenCount);\n        }\n        if (responseBody.results?.[0]?.tokenCount !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS, responseBody.results[0].tokenCount);\n        }\n        if (responseBody.results?.[0]?.completionReason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [\n            responseBody.results[0].completionReason,\n          ]);\n        }\n      } else if (currentModelId.includes('amazon.nova')) {\n        if (responseBody.usage !== undefined) {\n          if (responseBody.usage.inputTokens !== undefined) {\n            span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS, responseBody.usage.inputTokens);\n          }\n          if (responseBody.usage.outputTokens !== undefined) {\n            span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS, responseBody.usage.outputTokens);\n          }\n        }\n        if (responseBody.stopReason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [responseBody.stopReason]);\n        }\n      } else if (currentModelId.includes('anthropic.claude')) {\n        if (responseBody.usage?.input_tokens !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS, responseBody.usage.input_tokens);\n        }\n        if (responseBody.usage?.output_tokens !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS, responseBody.usage.output_tokens);\n        }\n        if (responseBody.stop_reason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [responseBody.stop_reason]);\n        }\n      } else if (currentModelId.includes('meta.llama')) {\n        if (responseBody.prompt_token_count !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS, responseBody.prompt_token_count);\n        }\n        if (responseBody.generation_token_count !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS, responseBody.generation_token_count);\n        }\n        if (responseBody.stop_reason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [responseBody.stop_reason]);\n        }\n      } else if (currentModelId.includes('cohere.command-r')) {\n        if (responseBody.text !== undefined) {\n          // NOTE: We approximate the token count since this value is not directly available in the body\n          // According to Bedrock docs they use (total_chars / 6) to approximate token count for pricing.\n          // https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-prepare.html\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS, Math.ceil(responseBody.text.length / 6));\n        }\n        if (responseBody.finish_reason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [responseBody.finish_reason]);\n        }\n      } else if (currentModelId.includes('cohere.command')) {\n        if (responseBody.generations?.[0]?.text !== undefined) {\n          span.setAttribute(\n            AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS,\n            // NOTE: We approximate the token count since this value is not directly available in the body\n            // According to Bedrock docs they use (total_chars / 6) to approximate token count for pricing.\n            // https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-prepare.html\n            Math.ceil(responseBody.generations[0].text.length / 6)\n          );\n        }\n        if (responseBody.generations?.[0]?.finish_reason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [\n            responseBody.generations[0].finish_reason,\n          ]);\n        }\n      } else if (currentModelId.includes('ai21.jamba')) {\n        if (responseBody.usage?.prompt_tokens !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_INPUT_TOKENS, responseBody.usage.prompt_tokens);\n        }\n        if (responseBody.usage?.completion_tokens !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS, responseBody.usage.completion_tokens);\n        }\n        if (responseBody.choices?.[0]?.finish_reason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [\n            responseBody.choices[0].finish_reason,\n          ]);\n        }\n      } else if (currentModelId.includes('mistral')) {\n        if (responseBody.outputs?.[0]?.text !== undefined) {\n          span.setAttribute(\n            AwsSpanProcessingUtil.GEN_AI_USAGE_OUTPUT_TOKENS,\n            // NOTE: We approximate the token count since this value is not directly available in the body\n            // According to Bedrock docs they use (total_chars / 6) to approximate token count for pricing.\n            // https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-prepare.html\n            Math.ceil(responseBody.outputs[0].text.length / 6)\n          );\n        }\n        if (responseBody.outputs?.[0]?.stop_reason !== undefined) {\n          span.setAttribute(AwsSpanProcessingUtil.GEN_AI_RESPONSE_FINISH_REASONS, [\n            responseBody.outputs[0].stop_reason,\n          ]);\n        }\n      }\n    }\n  }\n}\n"]}