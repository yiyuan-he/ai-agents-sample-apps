{"version":3,"file":"secretsmanager.js","sourceRoot":"","sources":["../../../../../src/patches/aws/services/secretsmanager.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAEtC,4CAAwE;AAMxE,oEAAiE;AAGjE,MAAa,8BAA8B;IACzC,kBAAkB,CAAC,OAA0B,EAAE,OAAoC;;QACjF,MAAM,QAAQ,GAAG,MAAA,OAAO,CAAC,YAAY,0CAAE,QAAQ,CAAC;QAEhD,MAAM,QAAQ,GAAa,cAAQ,CAAC,MAAM,CAAC;QAC3C,IAAI,QAA4B,CAAC;QAEjC,MAAM,cAAc,GAAe,EAAE,CAAC;QAEtC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,yBAAyB,CAAC,EAAE;YAClF,cAAc,CAAC,uCAAkB,CAAC,6BAA6B,CAAC,GAAG,QAAQ,CAAC;SAC7E;QAED,MAAM,UAAU,GAAG,KAAK,CAAC;QAEzB,OAAO;YACL,UAAU;YACV,cAAc;YACd,QAAQ;YACR,QAAQ;SACT,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,QAA4B,EAAE,IAAU,EAAE,MAAc,EAAE,MAAmC;QACxG,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;QAEpC,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,YAAY,CAAC,uCAAkB,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;SAChF;IACH,CAAC;CACF;AA9BD,wEA8BC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Attributes, Span, SpanKind, Tracer } from '@opentelemetry/api';\nimport {\n  AwsSdkInstrumentationConfig,\n  NormalizedRequest,\n  NormalizedResponse,\n} from '@opentelemetry/instrumentation-aws-sdk';\nimport { AWS_ATTRIBUTE_KEYS } from '../../../aws-attribute-keys';\nimport { RequestMetadata, ServiceExtension } from '../../../third-party/otel/aws/services/ServiceExtension';\n\nexport class SecretsManagerServiceExtension implements ServiceExtension {\n  requestPreSpanHook(request: NormalizedRequest, _config: AwsSdkInstrumentationConfig): RequestMetadata {\n    const secretId = request.commandInput?.SecretId;\n\n    const spanKind: SpanKind = SpanKind.CLIENT;\n    let spanName: string | undefined;\n\n    const spanAttributes: Attributes = {};\n\n    if (typeof secretId === 'string' && secretId.startsWith('arn:aws:secretsmanager:')) {\n      spanAttributes[AWS_ATTRIBUTE_KEYS.AWS_SECRETSMANAGER_SECRET_ARN] = secretId;\n    }\n\n    const isIncoming = false;\n\n    return {\n      isIncoming,\n      spanAttributes,\n      spanKind,\n      spanName,\n    };\n  }\n\n  responseHook(response: NormalizedResponse, span: Span, tracer: Tracer, config: AwsSdkInstrumentationConfig): void {\n    const secretArn = response.data.ARN;\n\n    if (secretArn) {\n      span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_SECRETSMANAGER_SECRET_ARN, secretArn);\n    }\n  }\n}\n"]}