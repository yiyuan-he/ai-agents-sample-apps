{"version":3,"file":"register.js","sourceRoot":"","sources":["../../src/register.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Modifications Copyright The OpenTelemetry Authors. Licensed under the Apache License 2.0 License.\n\n// Short-term workaround to avoid Upsteam OTel emitting logs such as:\n// - `OTEL_TRACES_SAMPLER value \"xray invalid, defaulting to always_on\".`\n// OTel dependencies will always load a default Sampler configuration. Although unused, that\n// load process will read the `OTEL_TRACES_SAMPLER` value and may emit the above log, which is\n// unwanted for `xray` value. Thus we temporarily remove this env var to avoid the unwanted log.\nlet useXraySampler = false;\nif (process.env.OTEL_TRACES_SAMPLER === 'xray') {\n  delete process.env.OTEL_TRACES_SAMPLER;\n  useXraySampler = true;\n}\n\nimport { diag, DiagConsoleLogger, trace } from '@opentelemetry/api';\nimport { getNodeAutoInstrumentations, InstrumentationConfigMap } from '@opentelemetry/auto-instrumentations-node';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport * as opentelemetry from '@opentelemetry/sdk-node';\nimport { AwsOpentelemetryConfigurator } from './aws-opentelemetry-configurator';\nimport { applyInstrumentationPatches, customExtractor } from './patches/instrumentation-patch';\n\ndiag.setLogger(new DiagConsoleLogger(), opentelemetry.core.getEnv().OTEL_LOG_LEVEL);\n\n/*\nSets up default environment variables and apply patches\n\nSet default OTEL_EXPORTER_OTLP_PROTOCOL to be `http/protobuf` to remain consistent with other ADOT languages. This must be run before\n`configurator.configure()`, which will use this value to create an OTel Metric Exporter that is used for the customized AWS Span Procesors.\nThe default value of OTEL_EXPORTER_OTLP_PROTOCOL should be `http/protobuf`:\nhttps://github.com/open-telemetry/opentelemetry-js/blob/34003c9b7ef7e7e95e86986550d1c7fb6c1c56c6/packages/opentelemetry-core/src/utils/environment.ts#L233\n\nAlso sets default OTEL_PROPAGATORS to ensure good compatibility with X-Ray and Application Signals.\n\nThis file may also be used to apply patches to upstream instrumentation - usually these are stopgap measures until we can contribute\nlong-term changes to upstream.\n*/\n\nexport function setAwsDefaultEnvironmentVariables(): void {\n  if (!process.env.OTEL_EXPORTER_OTLP_PROTOCOL) {\n    process.env.OTEL_EXPORTER_OTLP_PROTOCOL = 'http/protobuf';\n  }\n  if (!process.env.OTEL_PROPAGATORS) {\n    process.env.OTEL_PROPAGATORS = 'xray,tracecontext';\n  }\n  // Disable the following instrumentations by default\n  // This auto-instrumentation for the `fs` module generates many low-value spans. `dns` is similar.\n  // https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1344#issuecomment-1618993178\n  if (!process.env.OTEL_NODE_DISABLED_INSTRUMENTATIONS) {\n    process.env.OTEL_NODE_DISABLED_INSTRUMENTATIONS = 'fs,dns';\n  }\n}\nsetAwsDefaultEnvironmentVariables();\n\nexport const instrumentationConfigs: InstrumentationConfigMap = {\n  '@opentelemetry/instrumentation-aws-lambda': {\n    eventContextExtractor: customExtractor,\n  },\n  '@opentelemetry/instrumentation-aws-sdk': {\n    suppressInternalInstrumentation: true,\n  },\n  '@opentelemetry/instrumentation-mongoose': {\n    suppressInternalInstrumentation: true,\n  },\n};\nconst instrumentations: Instrumentation[] = getNodeAutoInstrumentations(instrumentationConfigs);\n\n// Apply instrumentation patches\napplyInstrumentationPatches(instrumentations);\n\nconst configurator: AwsOpentelemetryConfigurator = new AwsOpentelemetryConfigurator(instrumentations, useXraySampler);\nconst configuration: Partial<opentelemetry.NodeSDKConfiguration> = configurator.configure();\n\nconst sdk: opentelemetry.NodeSDK = new opentelemetry.NodeSDK(configuration);\n\n// The OpenTelemetry Authors code\n// We need to copy OpenTelemetry's register.ts file in order to provide the configuration\n// created by AwsOpentelemetryConfigurator, which cannot be done by otherwise. In the long term,\n// we wish to make contributions to upstream to improve customizability of the Node auto-instrumentation.\ntry {\n  sdk.start();\n\n  diag.info('Setting TraceProvider for instrumentations at the end of initialization');\n  for (const instrumentation of instrumentations) {\n    instrumentation.setTracerProvider(trace.getTracerProvider());\n  }\n\n  diag.debug(`Environment variable OTEL_PROPAGATORS is set to '${process.env.OTEL_PROPAGATORS}'`);\n  diag.debug(`Environment variable OTEL_EXPORTER_OTLP_PROTOCOL is set to '${process.env.OTEL_EXPORTER_OTLP_PROTOCOL}'`);\n  diag.info('AWS Distro of OpenTelemetry automatic instrumentation started successfully');\n} catch (error) {\n  diag.error(\n    'Error initializing AWS Distro of OpenTelemetry SDK. Your application is not instrumented and will not produce telemetry',\n    error\n  );\n}\n\nprocess.on('SIGTERM', () => {\n  sdk\n    .shutdown()\n    .then(() => diag.debug('AWS Distro of OpenTelemetry SDK terminated'))\n    .catch(error => diag.error('Error terminating AWS Distro of OpenTelemetry SDK', error));\n});\n\n// END The OpenTelemetry Authors code\n\n// Respect original `OTEL_TRACES_SAMPLER` as we previously deleted it temporarily for value `xray`\nif (useXraySampler) {\n  process.env.OTEL_TRACES_SAMPLER = 'xray';\n}\n"]}