{"version":3,"file":"aws-batch-unsampled-span-processor.js","sourceRoot":"","sources":["../../src/aws-batch-unsampled-span-processor.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,oGAAoG;;;AAEpG,4CAAyD;AAEzD,6DAA0D;AAC1D,kHAA+G;AAE/G;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAa,8BAA+B,SAAQ,+CAAoC;IAC7E,OAAO,CAAC,IAAU,EAAE,cAAuB;QAClD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,GAAG,gBAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC9D,IAAI,CAAC,YAAY,CAAC,uCAAkB,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YACpE,OAAO;SACR;IACH,CAAC;IAEQ,KAAK,CAAC,IAAkB;QAC/B,IAAK,IAAY,CAAC,aAAa,CAAC,QAAQ,EAAE;YACxC,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,GAAG,gBAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC9D,OAAO;SACR;QAEA,IAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,UAAU,KAAU,CAAC;CACtB;AArBD,wEAqBC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Modifications Copyright The OpenTelemetry Authors. Licensed under the Apache License 2.0 License.\n\nimport { Context, TraceFlags } from '@opentelemetry/api';\nimport { ReadableSpan, BufferConfig, Span } from '@opentelemetry/sdk-trace-base';\nimport { AWS_ATTRIBUTE_KEYS } from './aws-attribute-keys';\nimport { BatchSpanProcessorBase } from '@opentelemetry/sdk-trace-base/build/src/export/BatchSpanProcessorBase';\n\n/**\n * This class is a customized version of the `BatchSpanProcessorBase` from the\n * OpenTelemetry SDK (`@opentelemetry/sdk-trace-base/build/src/export/BatchSpanProcessorBase`).\n * It inherits much of the behavior of the `BatchSpanProcessorBase` while adding\n * specific logic to handle unsampled spans.\n *\n * It can't directly be inherited `BatchSpanProcessorBase` as child class because\n * a few stateful fields are private in `BatchSpanProcessorBase` which need to be accessed\n * in `AwsBatchUnsampledSpanProcessor` and we don't plan to update upstream code for it.\n *\n * In particular, the following methods are modified:\n *\n * 1. `onStart`: This method is modified to detect unsampled spans and add an\n *    AWS-specific attribute (`AWS_TRACE_FLAG_SAMPLED`) to denote that the span\n *    is unsampled. This is done by checking the `traceFlags` of the span.\n *\n * 2. `onEnd`: The logic here is changed to handle unsampled spans. While the\n *    default behavior of `BatchSpanProcessorBase` is to ignore unsampled spans,\n *    this version adds them to the buffer for export. The unsampled spans are\n *    queued and processed similarly to sampled spans.\n *\n * This processor ensures that even unsampled spans are exported, which is a\n * deviation from the typical span processing behavior in OpenTelemetry.\n *\n * The rest of the behavior—batch processing, queuing, and exporting spans in\n * batches—is inherited from the base class and remains largely the same.\n */\nexport class AwsBatchUnsampledSpanProcessor extends BatchSpanProcessorBase<BufferConfig> {\n  override onStart(span: Span, _parentContext: Context): void {\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_TRACE_FLAG_SAMPLED, false);\n      return;\n    }\n  }\n\n  override onEnd(span: ReadableSpan): void {\n    if ((this as any)._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 1) {\n      return;\n    }\n\n    (this as any)._addToBuffer(span);\n  }\n\n  onShutdown(): void {}\n}\n"]}