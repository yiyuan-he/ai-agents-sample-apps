{"version":3,"file":"otlp-aws-span-exporter.js","sourceRoot":"","sources":["../../src/otlp-aws-span-exporter.ts"],"names":[],"mappings":";;;AAAA,qEAAqE;AACrE,sCAAsC;AACtC,wFAAuG;AACvG,4CAA0C;AAE1C,sEAA0E;AAG1E,mCAAyC;AAEzC;;;;;;;GAOG;AACH,MAAa,mBAAoB,SAAQ,6CAAsB;IAc7D,YAAY,QAAgB,EAAE,MAAmC;QAC/D,KAAK,CAAC,mBAAmB,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QAJ/D,6FAA6F;QACrF,4BAAuB,GAAY,KAAK,CAAC;QAI/C,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACa,KAAK,CAAC,MAAM,CAAC,KAAqB,EAAE,cAA8C;;QAChG,6HAA6H;QAC7H,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAChC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,eAAe,GAA2B,0CAAuB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAEhG,IAAI,eAAe,KAAK,SAAS,EAAE;gBACjC,OAAO;aACR;YAED;;;cAGE;YACF,MAAM,UAAU,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,0CAAE,UAAU,0CAAE,WAAW,0CAAE,OAAO,EAAE,CAAC;YAEpF,IAAI,UAAU,EAAE;gBACd,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC;oBACnC,MAAM,EAAE,MAAM;oBACd,QAAQ,EAAE,OAAO;oBACjB,QAAQ,EAAE,GAAG,CAAC,QAAQ;oBACtB,IAAI,EAAE,GAAG,CAAC,QAAQ;oBAClB,IAAI,EAAE,eAAe;oBACrB,OAAO,kCACF,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KACtC,IAAI,EAAE,GAAG,CAAC,QAAQ,GACnB;iBACF,CAAC,CAAC;gBAEH,IAAI;oBACF,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC;wBAClC,WAAW,EAAE,IAAI,CAAC,eAAe,EAAE;wBACnC,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,OAAO,EAAE,mBAAmB,CAAC,YAAY;wBACzC,MAAM,EAAE,IAAI,CAAC,MAAM;qBACpB,CAAC,CAAC;oBAEH,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAEjD,4KAA4K;oBAC5K,MAAM,UAAU,GAAiC,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC;oBAC7E,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,GAAG,UAAU,CAAC;iBAC1E;gBAAC,OAAO,SAAS,EAAE;oBAClB,UAAI,CAAC,KAAK,CACR,iGAAiG,SAAS,EAAE,CAC7G,CAAC;iBACH;aACF;SACF;QAED,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC;IAED,+FAA+F;IACvF,kBAAkB,CAAC,OAA+B;QACxD,MAAM,UAAU,GAA2B,EAAE,CAAC;QAC9C,MAAM,YAAY,GAAG,CAAC,YAAY,EAAE,eAAe,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,CAAC;QAErG,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;YACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,EAAE;gBAC7C,UAAU,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;aAChC;SACF;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,gBAAgB;QACtB,IAAI,IAAA,sBAAc,GAAE,GAAG,EAAE,EAAE;YACzB,UAAI,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;YACnE,OAAO;SACR;QAED,IAAI;YACF,MAAM,YAAY,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;YAClE,MAAM,eAAe,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;YACzD,MAAM,eAAe,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;YACxD,MAAM,UAAU,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;YAEpD,CAAC,IAAI,CAAC,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;gBACnD,CAAC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;gBACtC,CAAC,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;gBAChD,CAAC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;YAC9C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;SACrC;QAAC,OAAO,KAAK,EAAE;YACd,UAAI,CAAC,KAAK,CAAC,6DAA6D,KAAK,EAAE,CAAC,CAAC;SAClF;IACH,CAAC;IAEO,MAAM,CAAC,eAAe,CAAC,QAAgB,EAAE,MAAmC;QAClF,MAAM,SAAS,GACb,MAAM,IAAI,IAAI;YACZ,CAAC,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE;YACnB,CAAC,iCACM,MAAM,KACT,GAAG,EAAE,QAAQ,GACd,CAAC;QAER,OAAO,SAAS,CAAC;IACnB,CAAC;;AA5HH,kDA6HC;AA5HyB,gCAAY,GAAW,MAAM,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { OTLPTraceExporter as OTLPProtoTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterNodeConfigBase } from '@opentelemetry/otlp-exporter-base';\nimport { ProtobufTraceSerializer } from '@opentelemetry/otlp-transformer';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { ExportResult } from '@opentelemetry/core';\nimport { getNodeVersion } from './utils';\n\n/**\n * This exporter extends the functionality of the OTLPProtoTraceExporter to allow spans to be exported\n * to the XRay OTLP endpoint https://xray.[AWSRegion].amazonaws.com/v1/traces. Utilizes the aws-sdk\n * library to sign and directly inject SigV4 Authentication to the exported request's headers. <a\n * href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-OTLPEndpoint.html\">...</a>\n *\n * This only works with version >=16 Node.js environments.\n */\nexport class OTLPAwsSpanExporter extends OTLPProtoTraceExporter {\n  private static readonly SERVICE_NAME: string = 'xray';\n  private endpoint: string;\n  private region: string;\n\n  // Holds the dependencies needed to sign the SigV4 headers\n  private defaultProvider: any;\n  private sha256: any;\n  private signatureV4: any;\n  private httpRequest: any;\n\n  // If the required dependencies are installed then we enable SigV4 signing. Otherwise skip it\n  private hasRequiredDependencies: boolean = false;\n\n  constructor(endpoint: string, config?: OTLPExporterNodeConfigBase) {\n    super(OTLPAwsSpanExporter.changeUrlConfig(endpoint, config));\n    this.initDependencies();\n    this.region = endpoint.split('.')[1];\n    this.endpoint = endpoint;\n  }\n\n  /**\n   * Overrides the upstream implementation of export. All behaviors are the same except if the\n   * endpoint is an XRay OTLP endpoint, we will sign the request with SigV4 in headers before\n   * sending it to the endpoint. Otherwise, we will skip signing.\n   */\n  public override async export(items: ReadableSpan[], resultCallback: (result: ExportResult) => void): Promise<void> {\n    // Only do SigV4 Signing if the required dependencies are installed. Otherwise default to the regular http/protobuf exporter.\n    if (this.hasRequiredDependencies) {\n      const url = new URL(this.endpoint);\n      const serializedSpans: Uint8Array | undefined = ProtobufTraceSerializer.serializeRequest(items);\n\n      if (serializedSpans === undefined) {\n        return;\n      }\n\n      /*\n        This is bad practice but there is no other way to access and inject SigV4 headers\n        into the request headers before the traces get exported.\n      */\n      const oldHeaders = this['_delegate']._transport?._transport?._parameters?.headers();\n\n      if (oldHeaders) {\n        const request = new this.httpRequest({\n          method: 'POST',\n          protocol: 'https',\n          hostname: url.hostname,\n          path: url.pathname,\n          body: serializedSpans,\n          headers: {\n            ...this.removeSigV4Headers(oldHeaders),\n            host: url.hostname,\n          },\n        });\n\n        try {\n          const signer = new this.signatureV4({\n            credentials: this.defaultProvider(),\n            region: this.region,\n            service: OTLPAwsSpanExporter.SERVICE_NAME,\n            sha256: this.sha256,\n          });\n\n          const signedRequest = await signer.sign(request);\n\n          // See type: https://github.com/open-telemetry/opentelemetry-js/blob/experimental/v0.57.1/experimental/packages/otlp-exporter-base/src/transport/http-transport-types.ts#L31\n          const newHeaders: () => Record<string, string> = () => signedRequest.headers;\n          this['_delegate']._transport._transport._parameters.headers = newHeaders;\n        } catch (exception) {\n          diag.debug(\n            `Failed to sign/authenticate the given exported Span request to OTLP XRay endpoint with error: ${exception}`\n          );\n        }\n      }\n    }\n\n    super.export(items, resultCallback);\n  }\n\n  // Removes Sigv4 headers from old headers to avoid accidentally copying them to the new headers\n  private removeSigV4Headers(headers: Record<string, string>) {\n    const newHeaders: Record<string, string> = {};\n    const sigV4Headers = ['x-amz-date', 'authorization', 'x-amz-content-sha256', 'x-amz-security-token'];\n\n    for (const key in headers) {\n      if (!sigV4Headers.includes(key.toLowerCase())) {\n        newHeaders[key] = headers[key];\n      }\n    }\n    return newHeaders;\n  }\n\n  private initDependencies(): any {\n    if (getNodeVersion() < 16) {\n      diag.error('SigV4 signing requires atleast Node major version 16');\n      return;\n    }\n\n    try {\n      const awsSdkModule = require('@aws-sdk/credential-provider-node');\n      const awsCryptoModule = require('@aws-crypto/sha256-js');\n      const signatureModule = require('@smithy/signature-v4');\n      const httpModule = require('@smithy/protocol-http');\n\n      (this.defaultProvider = awsSdkModule.defaultProvider),\n        (this.sha256 = awsCryptoModule.Sha256),\n        (this.signatureV4 = signatureModule.SignatureV4),\n        (this.httpRequest = httpModule.HttpRequest);\n      this.hasRequiredDependencies = true;\n    } catch (error) {\n      diag.error(`Failed to load required AWS dependency for SigV4 Signing: ${error}`);\n    }\n  }\n\n  private static changeUrlConfig(endpoint: string, config?: OTLPExporterNodeConfigBase): OTLPExporterNodeConfigBase {\n    const newConfig =\n      config == null\n        ? { url: endpoint }\n        : {\n            ...config,\n            url: endpoint,\n          };\n\n    return newConfig;\n  }\n}\n"]}