{"version":3,"file":"aws-metric-attribute-generator.js","sourceRoot":"","sources":["../../src/aws-metric-attribute-generator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Attributes, AttributeValue, diag, SpanKind } from '@opentelemetry/api';\nimport { defaultServiceName, Resource } from '@opentelemetry/resources';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport {\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_OPERATION,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_DB_USER,\n  SEMATTRS_FAAS_INVOKED_NAME,\n  SEMATTRS_FAAS_TRIGGER,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_MESSAGING_OPERATION,\n  SEMATTRS_MESSAGING_SYSTEM,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n  SEMATTRS_PEER_SERVICE,\n  SEMATTRS_RPC_METHOD,\n  SEMATTRS_RPC_SERVICE,\n  SEMRESATTRS_SERVICE_NAME,\n} from '@opentelemetry/semantic-conventions';\nimport { AWS_ATTRIBUTE_KEYS } from './aws-attribute-keys';\nimport { AwsSpanProcessingUtil } from './aws-span-processing-util';\nimport {\n  AttributeMap,\n  DEPENDENCY_METRIC,\n  MetricAttributeGenerator,\n  SERVICE_METRIC,\n} from './metric-attribute-generator';\nimport { SqsUrlParser } from './sqs-url-parser';\n\n// Does not exist in @opentelemetry/semantic-conventions\nconst _SERVER_SOCKET_ADDRESS: string = 'server.socket.address';\nconst _SERVER_SOCKET_PORT: string = 'server.socket.port';\nconst _NET_SOCK_PEER_ADDR: string = 'net.sock.peer.addr';\nconst _NET_SOCK_PEER_PORT: string = 'net.sock.peer.port';\n// Alternatively, `import { SemanticAttributes } from '@opentelemetry/instrumentation-undici/build/src/enums/SemanticAttributes';`\n//   SemanticAttributes.SERVER_ADDRESS\n//   SemanticAttributes.SERVER_PORT\nconst _SERVER_ADDRESS: string = 'server.address';\nconst _SERVER_PORT: string = 'server.port';\n// Alternatively, `import { AttributeNames } from '@opentelemetry/instrumentation-graphql/build/src/enums/AttributeNames';`\n//   AttributeNames.OPERATION_TYPE\nconst _GRAPHQL_OPERATION_TYPE: string = 'graphql.operation.type';\n// Special DEPENDENCY attribute value if GRAPHQL_OPERATION_TYPE attribute key is present.\nconst GRAPHQL: string = 'graphql';\n\n// Normalized remote service names for supported AWS services\nconst NORMALIZED_DYNAMO_DB_SERVICE_NAME: string = 'AWS::DynamoDB';\nconst NORMALIZED_KINESIS_SERVICE_NAME: string = 'AWS::Kinesis';\nconst NORMALIZED_S3_SERVICE_NAME: string = 'AWS::S3';\nconst NORMALIZED_SQS_SERVICE_NAME: string = 'AWS::SQS';\nconst NORMALIZED_SNS_SERVICE_NAME: string = 'AWS::SNS';\nconst NORMALIZED_SECRETSMANAGER_SERVICE_NAME = 'AWS::SecretsManager';\nconst NORMALIZED_STEPFUNCTIONS_SERVICE_NAME = 'AWS::StepFunctions';\nconst NORMALIZED_LAMBDA_SERVICE_NAME = 'AWS::Lambda';\nconst NORMALIZED_BEDROCK_SERVICE_NAME: string = 'AWS::Bedrock';\nconst NORMALIZED_BEDROCK_RUNTIME_SERVICE_NAME: string = 'AWS::BedrockRuntime';\n\nconst DB_CONNECTION_RESOURCE_TYPE: string = 'DB::Connection';\n// As per https://opentelemetry.io/docs/specs/semconv/resource/#service, if service name is not specified, SDK defaults\n// the service name to unknown_service:<process name> or just unknown_service.\n// - https://github.com/open-telemetry/opentelemetry-js/blob/b2778e1b2ff7b038cebf371f1eb9f808fd98107f/packages/opentelemetry-resources/src/platform/node/default-service-name.ts#L16.\n// - `defaultServiceName()` returns `unknown_service:${process.argv0}`\nconst OTEL_UNKNOWN_SERVICE: string = defaultServiceName();\n\n/**\n * AwsMetricAttributeGenerator generates very specific metric attributes based on low-cardinality\n * span and resource attributes. If such attributes are not present, we fallback to default values.\n *\n * <p>The goal of these particular metric attributes is to get metrics for incoming and outgoing\n * traffic for a service. Namely, {@link SpanKind.SERVER} and {@link SpanKind.CONSUMER} spans\n * represent \"incoming\" traffic, {@link SpanKind.CLIENT} and {@link SpanKind.PRODUCER} spans\n * represent \"outgoing\" traffic, and {@link SpanKind.INTERNAL} spans are ignored.\n */\nexport class AwsMetricAttributeGenerator implements MetricAttributeGenerator {\n  // This method is used by the AwsSpanMetricsProcessor to generate service and dependency metrics\n  public generateMetricAttributeMapFromSpan(span: ReadableSpan, resource: Resource): AttributeMap {\n    const attributesMap: AttributeMap = {};\n\n    if (AwsSpanProcessingUtil.shouldGenerateServiceMetricAttributes(span)) {\n      attributesMap[SERVICE_METRIC] = this.generateServiceMetricAttributes(span, resource);\n    }\n    if (AwsSpanProcessingUtil.shouldGenerateDependencyMetricAttributes(span)) {\n      attributesMap[DEPENDENCY_METRIC] = this.generateDependencyMetricAttributes(span, resource);\n    }\n\n    return attributesMap;\n  }\n\n  private generateServiceMetricAttributes(span: ReadableSpan, resource: Resource): Attributes {\n    const attributes: Attributes = {};\n\n    AwsMetricAttributeGenerator.setService(resource, span, attributes);\n    AwsMetricAttributeGenerator.setIngressOperation(span, attributes);\n    AwsMetricAttributeGenerator.setSpanKindForService(span, attributes);\n\n    return attributes;\n  }\n\n  private generateDependencyMetricAttributes(span: ReadableSpan, resource: Resource): Attributes {\n    const attributes: Attributes = {};\n    AwsMetricAttributeGenerator.setService(resource, span, attributes);\n    AwsMetricAttributeGenerator.setEgressOperation(span, attributes);\n    AwsMetricAttributeGenerator.setRemoteServiceAndOperation(span, attributes);\n    AwsMetricAttributeGenerator.setRemoteResourceTypeAndIdentifier(span, attributes);\n    AwsMetricAttributeGenerator.setSpanKindForDependency(span, attributes);\n    AwsMetricAttributeGenerator.setRemoteDbUser(span, attributes);\n\n    return attributes;\n  }\n\n  /** Service is always derived from {@link SEMRESATTRS_SERVICE_NAME} */\n  private static setService(resource: Resource, span: ReadableSpan, attributes: Attributes): void {\n    let service: AttributeValue | undefined = resource.attributes[SEMRESATTRS_SERVICE_NAME];\n\n    // In practice the service name is never undefined, but we can be defensive here.\n    if (service === undefined || service === OTEL_UNKNOWN_SERVICE) {\n      AwsMetricAttributeGenerator.logUnknownAttribute(AWS_ATTRIBUTE_KEYS.AWS_LOCAL_SERVICE, span);\n      service = AwsSpanProcessingUtil.UNKNOWN_SERVICE;\n    }\n    attributes[AWS_ATTRIBUTE_KEYS.AWS_LOCAL_SERVICE] = service;\n  }\n\n  /**\n   * Ingress operation (i.e. operation for Server and Consumer spans) will be generated from\n   * \"http.method + http.target/with the first API path parameter\" if the default span name equals\n   * null, UnknownOperation or http.method value.\n   */\n  private static setIngressOperation(span: ReadableSpan, attributes: Attributes): void {\n    const operation: string = AwsSpanProcessingUtil.getIngressOperation(span);\n    if (operation === AwsSpanProcessingUtil.UNKNOWN_OPERATION) {\n      AwsMetricAttributeGenerator.logUnknownAttribute(AWS_ATTRIBUTE_KEYS.AWS_LOCAL_OPERATION, span);\n    }\n    attributes[AWS_ATTRIBUTE_KEYS.AWS_LOCAL_OPERATION] = operation;\n  }\n\n  /**\n   * Egress operation (i.e. operation for Client and Producer spans) is always derived from a\n   * special span attribute, {@link AWS_ATTRIBUTE_KEYS.AWS_LOCAL_OPERATION}. This attribute is\n   * generated with a separate SpanProcessor, {@link AttributePropagatingSpanProcessor}\n   */\n  private static setEgressOperation(span: ReadableSpan, attributes: Attributes): void {\n    let operation: AttributeValue | undefined = AwsSpanProcessingUtil.getEgressOperation(span);\n    if (operation === undefined) {\n      AwsMetricAttributeGenerator.logUnknownAttribute(AWS_ATTRIBUTE_KEYS.AWS_LOCAL_OPERATION, span);\n      operation = AwsSpanProcessingUtil.UNKNOWN_OPERATION;\n    }\n    attributes[AWS_ATTRIBUTE_KEYS.AWS_LOCAL_OPERATION] = operation;\n  }\n\n  /**\n   * Remote attributes (only for Client and Producer spans) are generated based on low-cardinality\n   * span attributes, in priority order.\n   *\n   * <p>The first priority is the AWS Remote attributes, which are generated from manually\n   * instrumented span attributes, and are clear indications of customer intent. If AWS Remote\n   * attributes are not present, the next highest priority span attribute is Peer Service, which is\n   * also a reliable indicator of customer intent. If this is set, it will override\n   * AWS_REMOTE_SERVICE identified from any other span attribute, other than AWS Remote attributes.\n   *\n   * <p>After this, we look for the following low-cardinality span attributes that can be used to\n   * determine the remote metric attributes:\n   *\n   * <ul>\n   *   <li>RPC\n   *   <li>DB\n   *   <li>FAAS\n   *   <li>Messaging\n   *   <li>GraphQL - Special case, if {@link _GRAPHQL_OPERATION_TYPE} is present,\n   *       we use it for RemoteOperation and set RemoteService to {@link GRAPHQL}.\n   * </ul>\n   *\n   * <p>In each case, these span attributes were selected from the OpenTelemetry trace semantic\n   * convention specifications as they adhere to the three following criteria:\n   *\n   * <ul>\n   *   <li>Attributes are meaningfully indicative of remote service/operation names.\n   *   <li>Attributes are defined in the specification to be low cardinality, usually with a low-\n   *       cardinality list of values.\n   *   <li>Attributes are confirmed to have low-cardinality values, based on code analysis.\n   * </ul>\n   *\n   * if the selected attributes are still producing the UnknownRemoteService or\n   * UnknownRemoteOperation, `net.peer.name`, `net.peer.port`, `net.peer.sock.addr`,\n   * `net.peer.sock.port` and `http.url` will be used to derive the RemoteService. And `http.method`\n   * and `http.url` will be used to derive the RemoteOperation.\n   */\n  private static setRemoteServiceAndOperation(span: ReadableSpan, attributes: Attributes): void {\n    let remoteService: string = AwsSpanProcessingUtil.UNKNOWN_REMOTE_SERVICE;\n    let remoteOperation: string = AwsSpanProcessingUtil.UNKNOWN_REMOTE_OPERATION;\n\n    if (\n      AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_REMOTE_SERVICE) ||\n      AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_REMOTE_OPERATION)\n    ) {\n      remoteService = AwsMetricAttributeGenerator.getRemoteService(span, AWS_ATTRIBUTE_KEYS.AWS_REMOTE_SERVICE);\n      remoteOperation = AwsMetricAttributeGenerator.getRemoteOperation(span, AWS_ATTRIBUTE_KEYS.AWS_REMOTE_OPERATION);\n    } else if (\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_RPC_SERVICE) ||\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_RPC_METHOD)\n    ) {\n      remoteService = AwsMetricAttributeGenerator.normalizeRemoteServiceName(\n        span,\n        AwsMetricAttributeGenerator.getRemoteService(span, SEMATTRS_RPC_SERVICE)\n      );\n      remoteOperation = AwsMetricAttributeGenerator.getRemoteOperation(span, SEMATTRS_RPC_METHOD);\n    } else if (AwsSpanProcessingUtil.isDBSpan(span)) {\n      remoteService = AwsMetricAttributeGenerator.getRemoteService(span, SEMATTRS_DB_SYSTEM);\n      if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_DB_OPERATION)) {\n        remoteOperation = AwsMetricAttributeGenerator.getRemoteOperation(span, SEMATTRS_DB_OPERATION);\n      } else {\n        remoteOperation = AwsMetricAttributeGenerator.getDBStatementRemoteOperation(span, SEMATTRS_DB_STATEMENT);\n      }\n    } else if (\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_FAAS_INVOKED_NAME) ||\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_FAAS_TRIGGER)\n    ) {\n      remoteService = AwsMetricAttributeGenerator.getRemoteService(span, SEMATTRS_FAAS_INVOKED_NAME);\n      remoteOperation = AwsMetricAttributeGenerator.getRemoteOperation(span, SEMATTRS_FAAS_TRIGGER);\n    } else if (\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_MESSAGING_SYSTEM) ||\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_MESSAGING_OPERATION)\n    ) {\n      remoteService = AwsMetricAttributeGenerator.getRemoteService(span, SEMATTRS_MESSAGING_SYSTEM);\n      remoteOperation = AwsMetricAttributeGenerator.getRemoteOperation(span, SEMATTRS_MESSAGING_OPERATION);\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, _GRAPHQL_OPERATION_TYPE)) {\n      remoteService = GRAPHQL;\n      remoteOperation = AwsMetricAttributeGenerator.getRemoteOperation(span, _GRAPHQL_OPERATION_TYPE);\n    }\n\n    // Peer service takes priority as RemoteService over everything but AWS Remote.\n    if (\n      AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_PEER_SERVICE) &&\n      !AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_REMOTE_SERVICE)\n    ) {\n      remoteService = AwsMetricAttributeGenerator.getRemoteService(span, SEMATTRS_PEER_SERVICE);\n    }\n\n    // try to derive RemoteService and RemoteOperation from the other related attributes\n    if (remoteService === AwsSpanProcessingUtil.UNKNOWN_REMOTE_SERVICE) {\n      remoteService = AwsMetricAttributeGenerator.generateRemoteService(span);\n    }\n    if (remoteOperation === AwsSpanProcessingUtil.UNKNOWN_REMOTE_OPERATION) {\n      remoteOperation = AwsMetricAttributeGenerator.generateRemoteOperation(span);\n    }\n\n    attributes[AWS_ATTRIBUTE_KEYS.AWS_REMOTE_SERVICE] = remoteService;\n    attributes[AWS_ATTRIBUTE_KEYS.AWS_REMOTE_OPERATION] = remoteOperation;\n  }\n\n  /**\n   * When the remote call operation is undetermined for http use cases, will try to extract the\n   * remote operation name from http url string\n   */\n  private static generateRemoteOperation(span: ReadableSpan): string {\n    let remoteOperation: string = AwsSpanProcessingUtil.UNKNOWN_REMOTE_OPERATION;\n    if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_HTTP_URL)) {\n      const httpUrl: AttributeValue | undefined = span.attributes[SEMATTRS_HTTP_URL];\n      try {\n        let url: URL;\n        if (typeof httpUrl === 'string') {\n          url = new URL(httpUrl);\n          remoteOperation = AwsSpanProcessingUtil.extractAPIPathValue(url.pathname);\n        }\n      } catch (e: unknown) {\n        diag.verbose(`invalid http.url attribute: ${httpUrl}`);\n      }\n    }\n\n    const httpMethod: AttributeValue | undefined = span.attributes[SEMATTRS_HTTP_METHOD];\n    if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_HTTP_METHOD) && typeof httpMethod === 'string') {\n      remoteOperation = httpMethod + ' ' + remoteOperation;\n    }\n    if (remoteOperation === AwsSpanProcessingUtil.UNKNOWN_REMOTE_OPERATION) {\n      AwsMetricAttributeGenerator.logUnknownAttribute(AWS_ATTRIBUTE_KEYS.AWS_REMOTE_OPERATION, span);\n    }\n    return remoteOperation;\n  }\n\n  private static generateRemoteService(span: ReadableSpan): string {\n    let remoteService: string = AwsSpanProcessingUtil.UNKNOWN_REMOTE_SERVICE;\n\n    if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_NET_PEER_NAME)) {\n      remoteService = AwsMetricAttributeGenerator.getRemoteService(span, SEMATTRS_NET_PEER_NAME);\n      if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_NET_PEER_PORT)) {\n        const port: AttributeValue | undefined = span.attributes[SEMATTRS_NET_PEER_PORT];\n        remoteService += ':' + port;\n      }\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, _NET_SOCK_PEER_ADDR)) {\n      remoteService = AwsMetricAttributeGenerator.getRemoteService(span, _NET_SOCK_PEER_ADDR);\n      if (AwsSpanProcessingUtil.isKeyPresent(span, _NET_SOCK_PEER_PORT)) {\n        const port: AttributeValue | undefined = span.attributes[_NET_SOCK_PEER_PORT];\n        remoteService += ':' + port;\n      }\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_HTTP_URL)) {\n      const httpUrl: string = span.attributes[SEMATTRS_HTTP_URL] as string;\n      try {\n        const url: URL = new URL(httpUrl);\n        if (url.hostname !== '') {\n          remoteService = url.hostname;\n          if (url.port !== '') {\n            remoteService += ':' + url.port;\n          }\n        }\n      } catch (e: unknown) {\n        diag.verbose(`invalid http.url attribute: ${httpUrl}`);\n      }\n    } else {\n      AwsMetricAttributeGenerator.logUnknownAttribute(AWS_ATTRIBUTE_KEYS.AWS_REMOTE_SERVICE, span);\n    }\n    return remoteService;\n  }\n\n  /**\n   * If the span is an AWS SDK span, normalize the name to align with <a\n   * href=\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/supported-resources.html\">AWS\n   * Cloud Control resource format</a> as much as possible, with special attention to services we\n   * can detect remote resource information for. Long term, we would like to normalize service name\n   * in the upstream.\n   *\n   * For Bedrock, Bedrock Agent, and Bedrock Agent Runtime, we can align with AWS Cloud Control and use\n   * AWS::Bedrock for RemoteService. For BedrockRuntime, we are using AWS::BedrockRuntime\n   * as the associated remote resource (Model) is not listed in Cloud Control.\n   */\n  private static normalizeRemoteServiceName(span: ReadableSpan, serviceName: string): string {\n    if (AwsSpanProcessingUtil.isAwsSDKSpan(span)) {\n      const awsSdkServiceMapping: { [key: string]: string } = {\n        BedrockAgent: NORMALIZED_BEDROCK_SERVICE_NAME,\n        BedrockAgentRuntime: NORMALIZED_BEDROCK_SERVICE_NAME,\n        BedrockRuntime: NORMALIZED_BEDROCK_RUNTIME_SERVICE_NAME,\n        SecretsManager: NORMALIZED_SECRETSMANAGER_SERVICE_NAME,\n        SFN: NORMALIZED_STEPFUNCTIONS_SERVICE_NAME,\n      };\n      return awsSdkServiceMapping[serviceName] || 'AWS::' + serviceName;\n    }\n    return serviceName;\n  }\n\n  /**\n   * Remote resource attributes {@link AWS_ATTRIBUTE_KEYS.AWS_REMOTE_RESOURCE_TYPE} and\n   * {@link AWS_ATTRIBUTE_KEYS.AWS_REMOTE_RESOURCE_IDENTIFIER} are used to store information about the\n   * resource associated with the remote invocation, such as S3 bucket name, etc. We should only\n   * ever set both type and identifier or neither. If any identifier value contains | or ^ , they\n   * will be replaced with ^| or ^^.\n   *\n   * <p>AWS resources type and identifier adhere to <a\n   * href=\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/supported-resources.html\">AWS\n   * Cloud Control resource format</a>.\n   */\n  private static setRemoteResourceTypeAndIdentifier(span: ReadableSpan, attributes: Attributes): void {\n    let remoteResourceType: AttributeValue | undefined;\n    let remoteResourceIdentifier: AttributeValue | undefined;\n    let cloudFormationIdentifier: AttributeValue | undefined;\n\n    if (AwsSpanProcessingUtil.isAwsSDKSpan(span)) {\n      const awsTableNames: AttributeValue | undefined = span.attributes[AWS_ATTRIBUTE_KEYS.AWS_DYNAMODB_TABLE_NAMES];\n      if (\n        AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_DYNAMODB_TABLE_NAMES) &&\n        Array.isArray(awsTableNames) &&\n        awsTableNames.length === 1\n      ) {\n        remoteResourceType = NORMALIZED_DYNAMO_DB_SERVICE_NAME + '::Table';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(awsTableNames[0]);\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_KINESIS_STREAM_NAME)) {\n        remoteResourceType = NORMALIZED_KINESIS_SERVICE_NAME + '::Stream';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_KINESIS_STREAM_NAME]\n        );\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_S3_BUCKET)) {\n        remoteResourceType = NORMALIZED_S3_SERVICE_NAME + '::Bucket';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_S3_BUCKET]\n        );\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_SNS_TOPIC_ARN)) {\n        const snsArn = span.attributes[AWS_ATTRIBUTE_KEYS.AWS_SNS_TOPIC_ARN];\n\n        remoteResourceType = NORMALIZED_SNS_SERVICE_NAME + '::Topic';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          this.extractResourceNameFromArn(snsArn)\n        );\n        cloudFormationIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(snsArn);\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_SECRETSMANAGER_SECRET_ARN)) {\n        const secretsArn = span.attributes[AWS_ATTRIBUTE_KEYS.AWS_SECRETSMANAGER_SECRET_ARN];\n\n        remoteResourceType = NORMALIZED_SECRETSMANAGER_SERVICE_NAME + '::Secret';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          this.extractResourceNameFromArn(secretsArn)\n        );\n        cloudFormationIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(secretsArn);\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_STEPFUNCTIONS_STATEMACHINE_ARN)) {\n        const stateMachineArn = span.attributes[AWS_ATTRIBUTE_KEYS.AWS_STEPFUNCTIONS_STATEMACHINE_ARN];\n\n        remoteResourceType = NORMALIZED_STEPFUNCTIONS_SERVICE_NAME + '::StateMachine';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          this.extractResourceNameFromArn(stateMachineArn)\n        );\n        cloudFormationIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(stateMachineArn);\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_STEPFUNCTIONS_ACTIVITY_ARN)) {\n        const activityArn = span.attributes[AWS_ATTRIBUTE_KEYS.AWS_STEPFUNCTIONS_ACTIVITY_ARN];\n\n        remoteResourceType = NORMALIZED_STEPFUNCTIONS_SERVICE_NAME + '::Activity';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          this.extractResourceNameFromArn(activityArn)\n        );\n        cloudFormationIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(activityArn);\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_FUNCTION_NAME)) {\n        // Handling downstream Lambda as a service vs. an AWS resource:\n        // - If the method call is \"Invoke\", we treat downstream Lambda as a service.\n        // - Otherwise, we treat it as an AWS resource.\n        //\n        // This addresses a Lambda topology issue in Application Signals.\n        // More context in PR: https://github.com/aws-observability/aws-otel-python-instrumentation/pull/319\n        //\n        // NOTE: The env var LAMBDA_APPLICATION_SIGNALS_REMOTE_ENVIRONMENT was introduced as part of this fix.\n        // It is optional and allow users to override the default value if needed.\n        if (AwsMetricAttributeGenerator.getRemoteOperation(span, SEMATTRS_RPC_METHOD) === 'Invoke') {\n          attributes[AWS_ATTRIBUTE_KEYS.AWS_REMOTE_SERVICE] = AwsMetricAttributeGenerator.escapeDelimiters(\n            span.attributes[AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_FUNCTION_NAME]\n          );\n\n          attributes[AWS_ATTRIBUTE_KEYS.AWS_REMOTE_ENVIRONMENT] = `lambda:${\n            process.env.LAMBDA_APPLICATION_SIGNALS_REMOTE_ENVIRONMENT || 'default'\n          }`;\n        } else {\n          remoteResourceType = NORMALIZED_LAMBDA_SERVICE_NAME + '::Function';\n          remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n            span.attributes[AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_FUNCTION_NAME]\n          );\n          cloudFormationIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n            span.attributes[AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_FUNCTION_ARN]\n          );\n        }\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_RESOURCE_MAPPING_ID)) {\n        remoteResourceType = NORMALIZED_LAMBDA_SERVICE_NAME + '::EventSourceMapping';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_LAMBDA_RESOURCE_MAPPING_ID]\n        );\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_SQS_QUEUE_NAME)) {\n        remoteResourceType = NORMALIZED_SQS_SERVICE_NAME + '::Queue';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_SQS_QUEUE_NAME]\n        );\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_SQS_QUEUE_URL)) {\n        const sqsQueueUrl = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_SQS_QUEUE_URL]\n        );\n\n        remoteResourceType = NORMALIZED_SQS_SERVICE_NAME + '::Queue';\n        remoteResourceIdentifier = SqsUrlParser.getQueueName(sqsQueueUrl);\n        cloudFormationIdentifier = sqsQueueUrl;\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_AGENT_ID)) {\n        remoteResourceType = NORMALIZED_BEDROCK_SERVICE_NAME + '::Agent';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_AGENT_ID]\n        );\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_DATA_SOURCE_ID)) {\n        remoteResourceType = NORMALIZED_BEDROCK_SERVICE_NAME + '::DataSource';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_DATA_SOURCE_ID]\n        );\n        cloudFormationIdentifier = `${AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_KNOWLEDGE_BASE_ID]\n        )}|${remoteResourceIdentifier}`;\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_GUARDRAIL_ID)) {\n        remoteResourceType = NORMALIZED_BEDROCK_SERVICE_NAME + '::Guardrail';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_GUARDRAIL_ID]\n        );\n        cloudFormationIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_GUARDRAIL_ARN]\n        );\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_KNOWLEDGE_BASE_ID)) {\n        remoteResourceType = NORMALIZED_BEDROCK_SERVICE_NAME + '::KnowledgeBase';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AWS_ATTRIBUTE_KEYS.AWS_BEDROCK_KNOWLEDGE_BASE_ID]\n        );\n      } else if (AwsSpanProcessingUtil.isKeyPresent(span, AwsSpanProcessingUtil.GEN_AI_REQUEST_MODEL)) {\n        remoteResourceType = NORMALIZED_BEDROCK_SERVICE_NAME + '::Model';\n        remoteResourceIdentifier = AwsMetricAttributeGenerator.escapeDelimiters(\n          span.attributes[AwsSpanProcessingUtil.GEN_AI_REQUEST_MODEL]\n        );\n      }\n    } else if (AwsSpanProcessingUtil.isDBSpan(span)) {\n      remoteResourceType = DB_CONNECTION_RESOURCE_TYPE;\n      remoteResourceIdentifier = AwsMetricAttributeGenerator.getDbConnection(span);\n    }\n\n    if (remoteResourceType !== undefined && remoteResourceIdentifier !== undefined) {\n      attributes[AWS_ATTRIBUTE_KEYS.AWS_REMOTE_RESOURCE_TYPE] = remoteResourceType;\n      attributes[AWS_ATTRIBUTE_KEYS.AWS_REMOTE_RESOURCE_IDENTIFIER] = remoteResourceIdentifier;\n\n      if (AwsSpanProcessingUtil.isAwsSDKSpan(span)) {\n        if (cloudFormationIdentifier === undefined) {\n          cloudFormationIdentifier = remoteResourceIdentifier;\n        }\n\n        attributes[AWS_ATTRIBUTE_KEYS.AWS_CLOUDFORMATION_PRIMARY_IDENTIFIER] = cloudFormationIdentifier;\n      }\n    }\n  }\n\n  /**\n   * RemoteResourceIdentifier is populated with rule <code>\n   *     ^[{db.name}|]?{address}[|{port}]?\n   * </code>\n   *\n   * <pre>\n   * {address} attribute is retrieved in priority order:\n   * - {@link _SERVER_ADDRESS},\n   * - {@link SEMATTRS_NET_PEER_NAME},\n   * - {@link _SERVER_SOCKET_ADDRESS}\n   * - {@link SEMATTRS_DB_CONNECTION_STRING}-Hostname\n   * </pre>\n   *\n   * <pre>\n   * {port} attribute is retrieved in priority order:\n   * - {@link _SERVER_PORT},\n   * - {@link SEMATTRS_NET_PEER_PORT},\n   * - {@link _SERVER_SOCKET_PORT}\n   * - {@link SEMATTRS_DB_CONNECTION_STRING}-Port\n   * </pre>\n   *\n   * If address is not present, neither RemoteResourceType nor RemoteResourceIdentifier will be\n   * provided.\n   */\n  private static getDbConnection(span: ReadableSpan): string | undefined {\n    const dbName: AttributeValue | undefined = span.attributes[SEMATTRS_DB_NAME];\n    let dbConnection: string | undefined;\n\n    if (AwsSpanProcessingUtil.isKeyPresent(span, _SERVER_ADDRESS)) {\n      const serverAddress: AttributeValue | undefined = span.attributes[_SERVER_ADDRESS];\n      const serverPort: AttributeValue | undefined = span.attributes[_SERVER_PORT];\n      dbConnection = AwsMetricAttributeGenerator.buildDbConnection(serverAddress, serverPort);\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_NET_PEER_NAME)) {\n      const networkPeerAddress: AttributeValue | undefined = span.attributes[SEMATTRS_NET_PEER_NAME];\n      const networkPeerPort: AttributeValue | undefined = span.attributes[SEMATTRS_NET_PEER_PORT];\n      dbConnection = AwsMetricAttributeGenerator.buildDbConnection(networkPeerAddress, networkPeerPort);\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, _SERVER_SOCKET_ADDRESS)) {\n      const serverSocketAddress: AttributeValue | undefined = span.attributes[_SERVER_SOCKET_ADDRESS];\n      const serverSocketPort: AttributeValue | undefined = span.attributes[_SERVER_SOCKET_PORT];\n      dbConnection = AwsMetricAttributeGenerator.buildDbConnection(serverSocketAddress, serverSocketPort);\n    } else if (AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_DB_CONNECTION_STRING)) {\n      const connectionString: AttributeValue | undefined = span.attributes[SEMATTRS_DB_CONNECTION_STRING];\n      dbConnection = AwsMetricAttributeGenerator.buildDbConnectionString(connectionString);\n    }\n\n    // return empty resource identifier if db server is not found\n    if (dbConnection !== undefined && dbName !== undefined) {\n      return AwsMetricAttributeGenerator.escapeDelimiters(dbName) + '|' + dbConnection;\n    }\n\n    return dbConnection;\n  }\n\n  private static buildDbConnection(\n    address: AttributeValue | undefined,\n    port: AttributeValue | undefined\n  ): string | undefined {\n    if (typeof address !== 'string') {\n      return undefined;\n    }\n\n    return AwsMetricAttributeGenerator.escapeDelimiters(address) + (port !== undefined ? '|' + port : '');\n  }\n\n  private static buildDbConnectionString(connectionString: AttributeValue | undefined): string | undefined {\n    if (typeof connectionString !== 'string') {\n      return undefined;\n    }\n\n    let uri: URL;\n    let address: string;\n    let port: string;\n    try {\n      // Divergence from Java/Python\n      // `jdbc:<dababase>://` isn't handled well with `new URL()`\n      // uri.host and uri.port will be empty strings\n      // examples:\n      // - jdbc:postgresql://host:port/database?properties\n      // - jdbc:mysql://localhost:3306\n      // - abc:def:ghi://host:3306\n      // Try with a dummy schema without `:`, since we do not care about the schema\n      const schemeEndIndex: number = connectionString.indexOf('://');\n      if (schemeEndIndex === -1) {\n        uri = new URL(connectionString);\n      } else {\n        uri = new URL('dummyschema' + connectionString.substring(schemeEndIndex));\n      }\n\n      address = uri.hostname;\n      port = uri.port;\n    } catch (error: unknown) {\n      diag.verbose(`invalid DB ConnectionString: ${connectionString}`);\n      return undefined;\n    }\n\n    if (address === '') {\n      return undefined;\n    }\n\n    return AwsMetricAttributeGenerator.escapeDelimiters(address) + (port !== '' ? '|' + port : '');\n  }\n\n  private static escapeDelimiters(input: string | AttributeValue | undefined | null): string | undefined {\n    if (typeof input !== 'string') {\n      return undefined;\n    }\n\n    // Divergence from Java/Python\n    // `replaceAll(a,b)` is not available, and `replace(a,b)` only replaces the first occurrence\n    // `split(a).join(b)` is not equivalent for all (a,b), but works with `a = '^'` or a = '|'`.\n    // Implementing some regex is also possible\n    //   e.g. let re = new RegExp(String.raw`\\s${variable}\\s`, \"g\");\n    return input.split('^').join('^^').split('|').join('^|');\n  }\n\n  // Extracts the name of the resource from an arn\n  private static extractResourceNameFromArn(attribute: AttributeValue | undefined): string | undefined {\n    if (typeof attribute === 'string' && attribute.startsWith('arn:aws:')) {\n      const split = attribute.split(':');\n      return split[split.length - 1];\n    }\n\n    return undefined;\n  }\n\n  /** Span kind is needed for differentiating metrics in the EMF exporter */\n  private static setSpanKindForService(span: ReadableSpan, attributes: Attributes): void {\n    let spanKind: string = SpanKind[span.kind];\n    if (AwsSpanProcessingUtil.isLocalRoot(span)) {\n      spanKind = AwsSpanProcessingUtil.LOCAL_ROOT;\n    }\n    attributes[AWS_ATTRIBUTE_KEYS.AWS_SPAN_KIND] = spanKind;\n  }\n\n  private static setSpanKindForDependency(span: ReadableSpan, attributes: Attributes): void {\n    const spanKind: string = SpanKind[span.kind];\n    attributes[AWS_ATTRIBUTE_KEYS.AWS_SPAN_KIND] = spanKind;\n  }\n\n  private static setRemoteDbUser(span: ReadableSpan, attributes: Attributes): void {\n    if (AwsSpanProcessingUtil.isDBSpan(span) && AwsSpanProcessingUtil.isKeyPresent(span, SEMATTRS_DB_USER)) {\n      attributes[AWS_ATTRIBUTE_KEYS.AWS_REMOTE_DB_USER] = span.attributes[SEMATTRS_DB_USER];\n    }\n  }\n\n  private static getRemoteService(span: ReadableSpan, remoteServiceKey: string): string {\n    let remoteService: AttributeValue | undefined = span.attributes[remoteServiceKey];\n    if (typeof remoteService !== 'string') {\n      remoteService = AwsSpanProcessingUtil.UNKNOWN_REMOTE_SERVICE;\n    }\n    return remoteService;\n  }\n\n  private static getRemoteOperation(span: ReadableSpan, remoteOperationKey: string): string {\n    let remoteOperation: AttributeValue | undefined = span.attributes[remoteOperationKey];\n    if (typeof remoteOperation !== 'string') {\n      remoteOperation = AwsSpanProcessingUtil.UNKNOWN_REMOTE_OPERATION;\n    }\n    return remoteOperation;\n  }\n\n  /**\n   * If no db.operation attribute provided in the span, we use db.statement to compute a valid\n   * remote operation in a best-effort manner. To do this, we take the first substring of the\n   * statement and compare to a regex list of known SQL keywords. The substring length is determined\n   * by the longest known SQL keywords.\n   */\n  private static getDBStatementRemoteOperation(span: ReadableSpan, remoteOperationKey: string): string {\n    let remoteOperation: AttributeValue | undefined = span.attributes[remoteOperationKey];\n    if (typeof remoteOperation !== 'string') {\n      remoteOperation = AwsSpanProcessingUtil.UNKNOWN_REMOTE_OPERATION;\n    }\n\n    // Remove all whitespace and newline characters from the beginning of remote_operation\n    // and retrieve the first MAX_KEYWORD_LENGTH characters\n    remoteOperation = remoteOperation.trimStart();\n    if (remoteOperation.length > AwsSpanProcessingUtil.MAX_KEYWORD_LENGTH) {\n      remoteOperation = remoteOperation.substring(0, AwsSpanProcessingUtil.MAX_KEYWORD_LENGTH);\n    }\n\n    const matcher: RegExpMatchArray | null = remoteOperation\n      .toUpperCase()\n      .match(AwsSpanProcessingUtil.SQL_DIALECT_PATTERN);\n    if (matcher == null || matcher.length === 0) {\n      remoteOperation = AwsSpanProcessingUtil.UNKNOWN_REMOTE_OPERATION;\n    } else {\n      remoteOperation = matcher[0];\n    }\n\n    return remoteOperation;\n  }\n\n  private static logUnknownAttribute(attributeKey: string, span: ReadableSpan): void {\n    diag.verbose(`No valid ${attributeKey} value found for ${SpanKind[span.kind]} span ${span.spanContext().spanId}`);\n  }\n}\n"]}