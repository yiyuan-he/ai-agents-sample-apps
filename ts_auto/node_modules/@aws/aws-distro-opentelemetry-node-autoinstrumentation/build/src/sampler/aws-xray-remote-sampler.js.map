{"version":3,"file":"aws-xray-remote-sampler.js","sourceRoot":"","sources":["../../../src/sampler/aws-xray-remote-sampler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Attributes, Context, DiagLogger, Link, SpanKind, diag } from '@opentelemetry/api';\nimport { ParentBasedSampler, Sampler, SamplingResult } from '@opentelemetry/sdk-trace-base';\nimport { AwsXraySamplingClient } from './aws-xray-sampling-client';\nimport { FallbackSampler } from './fallback-sampler';\nimport {\n  AwsXRayRemoteSamplerConfig,\n  GetSamplingRulesResponse,\n  GetSamplingTargetsBody,\n  GetSamplingTargetsResponse,\n  SamplingRuleRecord,\n  SamplingTargetDocument,\n  TargetMap,\n} from './remote-sampler.types';\nimport { DEFAULT_TARGET_POLLING_INTERVAL_SECONDS, RuleCache } from './rule-cache';\nimport { SamplingRuleApplier } from './sampling-rule-applier';\n\n// 5 minute default sampling rules polling interval\nconst DEFAULT_RULES_POLLING_INTERVAL_SECONDS: number = 5 * 60;\n// Default endpoint for awsproxy : https://aws-otel.github.io/docs/getting-started/remote-sampling#enable-awsproxy-extension\nconst DEFAULT_AWS_PROXY_ENDPOINT: string = 'http://localhost:2000';\n\n// Wrapper class to ensure that all XRay Sampler Functionality in _AwsXRayRemoteSampler\n// uses ParentBased logic to respect the parent span's sampling decision\nexport class AwsXRayRemoteSampler implements Sampler {\n  private _root: ParentBasedSampler;\n  constructor(samplerConfig: AwsXRayRemoteSamplerConfig) {\n    this._root = new ParentBasedSampler({ root: new _AwsXRayRemoteSampler(samplerConfig) });\n  }\n  public shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: Attributes,\n    links: Link[]\n  ): SamplingResult {\n    return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n  }\n\n  public toString(): string {\n    return `AwsXRayRemoteSampler{root=${this._root.toString()}`;\n  }\n}\n\n// _AwsXRayRemoteSampler contains all core XRay Sampler Functionality,\n// however it is NOT Parent-based (e.g. Sample logic runs for each span)\n// Not intended for external use, use Parent-based `AwsXRayRemoteSampler` instead.\nexport class _AwsXRayRemoteSampler implements Sampler {\n  private rulePollingIntervalMillis: number;\n  private targetPollingInterval: number;\n  private awsProxyEndpoint: string;\n  private ruleCache: RuleCache;\n  private fallbackSampler: FallbackSampler;\n  private samplerDiag: DiagLogger;\n  private rulePoller: NodeJS.Timer | undefined;\n  private targetPoller: NodeJS.Timer | undefined;\n  private clientId: string;\n  private rulePollingJitterMillis: number;\n  private targetPollingJitterMillis: number;\n  private samplingClient: AwsXraySamplingClient;\n\n  constructor(samplerConfig: AwsXRayRemoteSamplerConfig) {\n    this.samplerDiag = diag;\n\n    if (samplerConfig.pollingInterval == null || samplerConfig.pollingInterval < 10) {\n      this.samplerDiag.warn(\n        `'pollingInterval' is undefined or too small. Defaulting to ${DEFAULT_RULES_POLLING_INTERVAL_SECONDS} seconds`\n      );\n      this.rulePollingIntervalMillis = DEFAULT_RULES_POLLING_INTERVAL_SECONDS * 1000;\n    } else {\n      this.rulePollingIntervalMillis = samplerConfig.pollingInterval * 1000;\n    }\n\n    this.rulePollingJitterMillis = Math.random() * 5 * 1000;\n    this.targetPollingInterval = this.getDefaultTargetPollingInterval();\n    this.targetPollingJitterMillis = (Math.random() / 10) * 1000;\n\n    this.awsProxyEndpoint = samplerConfig.endpoint ? samplerConfig.endpoint : DEFAULT_AWS_PROXY_ENDPOINT;\n    this.fallbackSampler = new FallbackSampler();\n    this.clientId = _AwsXRayRemoteSampler.generateClientId();\n    this.ruleCache = new RuleCache(samplerConfig.resource);\n\n    this.samplingClient = new AwsXraySamplingClient(this.awsProxyEndpoint, this.samplerDiag);\n\n    // Start the Sampling Rules poller\n    this.startSamplingRulesPoller();\n\n    // Start the Sampling Targets poller where the first poll occurs after the default interval\n    this.startSamplingTargetsPoller();\n  }\n\n  public getDefaultTargetPollingInterval(): number {\n    return DEFAULT_TARGET_POLLING_INTERVAL_SECONDS;\n  }\n\n  public shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: Attributes,\n    links: Link[]\n  ): SamplingResult {\n    if (this.ruleCache.isExpired()) {\n      this.samplerDiag.debug('Rule cache is expired, so using fallback sampling strategy');\n      return this.fallbackSampler.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n\n    const matchedRule: SamplingRuleApplier | undefined = this.ruleCache.getMatchedRule(attributes);\n    if (matchedRule) {\n      return matchedRule.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n\n    this.samplerDiag.debug(\n      'Using fallback sampler as no rule match was found. This is likely due to a bug, since default rule should always match'\n    );\n    return this.fallbackSampler.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n  }\n\n  public toString(): string {\n    return `_AwsXRayRemoteSampler{awsProxyEndpoint=${\n      this.awsProxyEndpoint\n    }, rulePollingIntervalMillis=${this.rulePollingIntervalMillis.toString()}}`;\n  }\n\n  private startSamplingRulesPoller(): void {\n    // Execute first update\n    this.getAndUpdateSamplingRules();\n    // Update sampling rules every 5 minutes (or user-defined polling interval)\n    this.rulePoller = setInterval(\n      () => this.getAndUpdateSamplingRules(),\n      this.rulePollingIntervalMillis + this.rulePollingJitterMillis\n    );\n    this.rulePoller.unref();\n  }\n\n  private startSamplingTargetsPoller(): void {\n    // Update sampling targets every targetPollingInterval (usually 10 seconds)\n    this.targetPoller = setInterval(\n      () => this.getAndUpdateSamplingTargets(),\n      this.targetPollingInterval * 1000 + this.targetPollingJitterMillis\n    );\n    this.targetPoller.unref();\n  }\n\n  private getAndUpdateSamplingTargets(): void {\n    const requestBody: GetSamplingTargetsBody = {\n      SamplingStatisticsDocuments: this.ruleCache.createSamplingStatisticsDocuments(this.clientId),\n    };\n\n    this.samplingClient.fetchSamplingTargets(requestBody, this.updateSamplingTargets.bind(this));\n  }\n\n  private getAndUpdateSamplingRules(): void {\n    this.samplingClient.fetchSamplingRules(this.updateSamplingRules.bind(this));\n  }\n\n  private updateSamplingRules(responseObject: GetSamplingRulesResponse): void {\n    let samplingRules: SamplingRuleApplier[] = [];\n\n    samplingRules = [];\n    if (responseObject.SamplingRuleRecords) {\n      responseObject.SamplingRuleRecords.forEach((record: SamplingRuleRecord) => {\n        if (record.SamplingRule) {\n          samplingRules.push(new SamplingRuleApplier(record.SamplingRule, undefined));\n        }\n      });\n      this.ruleCache.updateRules(samplingRules);\n    } else {\n      this.samplerDiag.error('SamplingRuleRecords from GetSamplingRules request is not defined');\n    }\n  }\n\n  private updateSamplingTargets(responseObject: GetSamplingTargetsResponse): void {\n    try {\n      const targetDocuments: TargetMap = {};\n\n      // Create Target-Name-to-Target-Map from sampling targets response\n      responseObject.SamplingTargetDocuments.forEach((newTarget: SamplingTargetDocument) => {\n        targetDocuments[newTarget.RuleName] = newTarget;\n      });\n\n      // Update targets in the cache\n      const [refreshSamplingRules, nextPollingInterval]: [boolean, number] = this.ruleCache.updateTargets(\n        targetDocuments,\n        responseObject.LastRuleModification\n      );\n      this.targetPollingInterval = nextPollingInterval;\n      clearInterval(this.targetPoller);\n      this.startSamplingTargetsPoller();\n\n      if (refreshSamplingRules) {\n        this.samplerDiag.debug('Performing out-of-band sampling rule polling to fetch updated rules.');\n        clearInterval(this.rulePoller);\n        this.startSamplingRulesPoller();\n      }\n    } catch (error: unknown) {\n      this.samplerDiag.debug('Error occurred when updating Sampling Targets');\n    }\n  }\n\n  private static generateClientId(): string {\n    const hexChars: string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n    const clientIdArray: string[] = [];\n    for (let _: number = 0; _ < 24; _ += 1) {\n      clientIdArray.push(hexChars[Math.floor(Math.random() * hexChars.length)]);\n    }\n    return clientIdArray.join('');\n  }\n}\n"]}