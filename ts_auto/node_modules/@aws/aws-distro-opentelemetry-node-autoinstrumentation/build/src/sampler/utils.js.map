{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/sampler/utils.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAEtC,4CAAsE;AACtE,8EAM6C;AAEhC,QAAA,sBAAsB,GAA2C;IAC5E,CAAC,qDAA8B,CAAC,EAAE,uBAAuB;IACzD,CAAC,gEAAyC,CAAC,EAAE,oCAAoC;IACjF,CAAC,kDAA2B,CAAC,EAAE,oBAAoB;IACnD,CAAC,kDAA2B,CAAC,EAAE,qBAAqB;IACpD,CAAC,kDAA2B,CAAC,EAAE,qBAAqB;CACrD,CAAC;AAEF,qHAAqH;AACrH,SAAS,YAAY,CAAC,YAAoB;IACxC,iFAAiF;IACjF,OAAO,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;AAC3D,CAAC;AAED,SAAS,sBAAsB,CAAC,OAAe;IAC7C,OAAO,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACxE,CAAC;AAED,SAAgB,aAAa,CAAC,OAAgB,EAAE,IAAqB;IACnE,IAAI,OAAO,KAAK,GAAG;QAAE,OAAO,IAAI,CAAC;IACjC,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,IAAI,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IACpE,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;IAEnD,MAAM,KAAK,GAA4B,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,IAAI,sBAAsB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC;IAEtH,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,UAAI,CAAC,KAAK,CAAC,qCAAqC,IAAI,oBAAoB,OAAO,EAAE,CAAC,CAAC;QACnF,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAbD,sCAaC;AAED,SAAgB,cAAc,CAC5B,UAAkC,EAClC,cAAqD;IAErD,IAAI,CAAC,cAAc,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/D,OAAO,IAAI,CAAC;KACb;IAED,IACE,UAAU,KAAK,SAAS;QACxB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,EACnE;QACA,OAAO,KAAK,CAAC;KACd;IAED,IAAI,YAAY,GAAW,CAAC,CAAC;IAC7B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QACrD,MAAM,QAAQ,GAAuB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC;QAElG,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,SAAS;SACV;QAED,IAAI,aAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,EAAE;YAClD,0BAA0B;YAC1B,YAAY,IAAI,CAAC,CAAC;SACnB;KACF;IAED,OAAO,YAAY,KAAK,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC;AAC7D,CAAC;AA/BD,wCA+BC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AttributeValue, Attributes, diag } from '@opentelemetry/api';\nimport {\n  CLOUDPLATFORMVALUES_AWS_EC2,\n  CLOUDPLATFORMVALUES_AWS_ECS,\n  CLOUDPLATFORMVALUES_AWS_EKS,\n  CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n  CLOUDPLATFORMVALUES_AWS_LAMBDA,\n} from '@opentelemetry/semantic-conventions';\n\nexport const CLOUD_PLATFORM_MAPPING: { [cloudPlatformKey: string]: string } = {\n  [CLOUDPLATFORMVALUES_AWS_LAMBDA]: 'AWS::Lambda::Function',\n  [CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK]: 'AWS::ElasticBeanstalk::Environment',\n  [CLOUDPLATFORMVALUES_AWS_EC2]: 'AWS::EC2::Instance',\n  [CLOUDPLATFORMVALUES_AWS_ECS]: 'AWS::ECS::Container',\n  [CLOUDPLATFORMVALUES_AWS_EKS]: 'AWS::EKS::Container',\n};\n\n// Template function from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\nfunction escapeRegExp(regExPattern: string): string {\n  // removed * and ? so they don't get escaped to maintain them as a wildcard match\n  return regExPattern.replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction convertPatternToRegExp(pattern: string): string {\n  return escapeRegExp(pattern).replace(/\\*/g, '.*').replace(/\\?/g, '.');\n}\n\nexport function wildcardMatch(pattern?: string, text?: AttributeValue): boolean {\n  if (pattern === '*') return true;\n  if (pattern === undefined || typeof text !== 'string') return false;\n  if (pattern.length === 0) return text.length === 0;\n\n  const match: RegExpMatchArray | null = text.toLowerCase().match(`^${convertPatternToRegExp(pattern.toLowerCase())}$`);\n\n  if (match === null) {\n    diag.debug(`WildcardMatch: no match found for ${text} against pattern ${pattern}`);\n    return false;\n  }\n\n  return true;\n}\n\nexport function attributeMatch(\n  attributes: Attributes | undefined,\n  ruleAttributes: { [key: string]: string } | undefined\n): boolean {\n  if (!ruleAttributes || Object.keys(ruleAttributes).length === 0) {\n    return true;\n  }\n\n  if (\n    attributes === undefined ||\n    Object.keys(attributes).length === 0 ||\n    Object.keys(ruleAttributes).length > Object.keys(attributes).length\n  ) {\n    return false;\n  }\n\n  let matchedCount: number = 0;\n  for (const [key, value] of Object.entries(attributes)) {\n    const foundKey: string | undefined = Object.keys(ruleAttributes).find(ruleKey => ruleKey === key);\n\n    if (foundKey === undefined) {\n      continue;\n    }\n\n    if (wildcardMatch(ruleAttributes[foundKey], value)) {\n      // increment matched count\n      matchedCount += 1;\n    }\n  }\n\n  return matchedCount === Object.keys(ruleAttributes).length;\n}\n"]}