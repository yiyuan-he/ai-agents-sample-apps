{"version":3,"file":"aws-xray-sampling-client.js","sourceRoot":"","sources":["../../../src/sampler/aws-xray-sampling-client.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DiagLogFunction, DiagLogger, context } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport * as http from 'http';\nimport { GetSamplingRulesResponse, GetSamplingTargetsBody, GetSamplingTargetsResponse } from './remote-sampler.types';\n\nexport class AwsXraySamplingClient {\n  private getSamplingRulesEndpoint: string;\n  private samplingTargetsEndpoint: string;\n  private samplerDiag: DiagLogger;\n\n  constructor(endpoint: string, samplerDiag: DiagLogger) {\n    this.getSamplingRulesEndpoint = endpoint + '/GetSamplingRules';\n    this.samplingTargetsEndpoint = endpoint + '/SamplingTargets';\n    this.samplerDiag = samplerDiag;\n  }\n\n  public fetchSamplingTargets(\n    requestBody: GetSamplingTargetsBody,\n    callback: (responseObject: GetSamplingTargetsResponse) => void\n  ) {\n    this.makeSamplingRequest<GetSamplingTargetsResponse>(\n      this.samplingTargetsEndpoint,\n      callback,\n      this.samplerDiag.debug,\n      JSON.stringify(requestBody)\n    );\n  }\n\n  public fetchSamplingRules(callback: (responseObject: GetSamplingRulesResponse) => void) {\n    this.makeSamplingRequest<GetSamplingRulesResponse>(this.getSamplingRulesEndpoint, callback, this.samplerDiag.error);\n  }\n\n  private makeSamplingRequest<T>(\n    url: string,\n    callback: (responseObject: T) => void,\n    logger: DiagLogFunction,\n    requestBodyJsonString?: string\n  ): void {\n    const options: http.RequestOptions = {\n      method: 'POST',\n      headers: {},\n    };\n\n    if (requestBodyJsonString) {\n      options.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(requestBodyJsonString),\n      };\n    }\n\n    // Ensure AWS X-Ray Sampler does not generate traces itself\n    context.with(suppressTracing(context.active()), () => {\n      const req: http.ClientRequest = http\n        .request(url, options, response => {\n          response.setEncoding('utf-8');\n          let responseData: string = '';\n          response.on('data', dataChunk => (responseData += dataChunk));\n          response.on('end', () => {\n            if (response.statusCode === 200 && responseData.length > 0) {\n              let responseObject: T | undefined = undefined;\n              try {\n                responseObject = JSON.parse(responseData) as T;\n              } catch (e: unknown) {\n                logger(`Error occurred when parsing responseData from ${url}`);\n              }\n\n              if (responseObject) {\n                callback(responseObject);\n              }\n            } else {\n              this.samplerDiag.debug(`${url} Response Code is: ${response.statusCode}`);\n              this.samplerDiag.debug(`${url} responseData is: ${responseData}`);\n            }\n          });\n        })\n        .on('error', (error: unknown) => {\n          logger(`Error occurred when making an HTTP POST to ${url}: ${error}`);\n        });\n      if (requestBodyJsonString) {\n        req.end(requestBodyJsonString);\n      } else {\n        req.end();\n      }\n    });\n  }\n}\n"]}