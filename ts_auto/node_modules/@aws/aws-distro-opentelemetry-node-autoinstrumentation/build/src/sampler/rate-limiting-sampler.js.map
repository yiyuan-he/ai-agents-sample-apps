{"version":3,"file":"rate-limiting-sampler.js","sourceRoot":"","sources":["../../../src/sampler/rate-limiting-sampler.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAGtC,kEAA0F;AAC1F,iDAA6C;AAE7C,MAAa,mBAAmB;IAI9B,YAAY,KAAa;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,IAAI,0BAAW,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,YAAY,CACV,OAAgB,EAChB,OAAe,EACf,QAAgB,EAChB,QAAkB,EAClB,UAAsB,EACtB,KAAa;QAEb,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YAC1B,OAAO,EAAE,QAAQ,EAAE,iCAAgB,CAAC,kBAAkB,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;SAClF;QACD,OAAO,EAAE,QAAQ,EAAE,iCAAgB,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;IAC3E,CAAC;IAEM,QAAQ;QACb,OAAO,sEAAsE,IAAI,CAAC,KAAK,yCAAyC,CAAC;IACnI,CAAC;CACF;AA1BD,kDA0BC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Attributes, Context, Link, SpanKind } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/sdk-trace-base';\nimport { RateLimiter } from './rate-limiter';\n\nexport class RateLimitingSampler implements Sampler {\n  private quota: number;\n  private reservoir: RateLimiter;\n\n  constructor(quota: number) {\n    this.quota = quota;\n    this.reservoir = new RateLimiter(quota);\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: Attributes,\n    links: Link[]\n  ): SamplingResult {\n    if (this.reservoir.take(1)) {\n      return { decision: SamplingDecision.RECORD_AND_SAMPLED, attributes: attributes };\n    }\n    return { decision: SamplingDecision.NOT_RECORD, attributes: attributes };\n  }\n\n  public toString(): string {\n    return `RateLimitingSampler{rate limiting sampling with sampling config of ${this.quota} req/sec and 0% of additional requests}`;\n  }\n}\n"]}