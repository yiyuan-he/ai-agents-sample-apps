{"version":3,"file":"rate-limiter.js","sourceRoot":"","sources":["../../../src/sampler/rate-limiter.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAEtC;;;;GAIG;AACH,MAAa,WAAW;IAOtB,YAAY,KAAa,EAAE,sBAA8B,CAAC;QACxD,IAAI,CAAC,kBAAkB,GAAG,mBAAmB,GAAG,MAAM,CAAC;QACvD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACpC,+CAA+C;IACjD,CAAC;IAEM,IAAI,CAAC,OAAe,CAAC;QAC1B,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YACpB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,cAAc,GAAW,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QAEnD,qCAAqC;QACrC,MAAM,YAAY,GAAW,IAAI,GAAG,cAAc,CAAC;QAEnD,MAAM,mBAAmB,GAAW,IAAI,CAAC,GAAG,EAAE,CAAC;QAC/C,IAAI,oBAAoB,GAAW,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAChF,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC/E,MAAM,6BAA6B,GAAW,oBAAoB,GAAG,YAAY,CAAC;QAClF,IAAI,6BAA6B,IAAI,CAAC,EAAE;YACtC,IAAI,CAAC,iBAAiB,GAAG,mBAAmB,GAAG,6BAA6B,CAAC;YAC7E,OAAO,IAAI,CAAC;SACb;QACD,iCAAiC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAnCD,kCAmCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/*\n * The RateLimiter keeps track of the current reservoir quota balance available (measured via available time)\n * If enough time has elapsed, the RateLimiter will allow quota balance to be consumed/taken (decrease available time)\n * A RateLimitingSampler uses this RateLimiter to determine if it should sample or not based on the quota balance available.\n */\nexport class RateLimiter {\n  // Quota assigned to client to dictate maximum quota balance that can be consumed per second.\n  private quota: number;\n  private MAX_BALANCE_MILLIS: number;\n  // Used to measure current quota balance.\n  private walletFloorMillis: number;\n\n  constructor(quota: number, maxBalanceInSeconds: number = 1) {\n    this.MAX_BALANCE_MILLIS = maxBalanceInSeconds * 1000.0;\n    this.quota = quota;\n    this.walletFloorMillis = Date.now();\n    // current \"balance\" would be `ceiling - floor`\n  }\n\n  public take(cost: number = 1): boolean {\n    if (this.quota === 0) {\n      return false;\n    }\n\n    const quotaPerMillis: number = this.quota / 1000.0;\n\n    // assume divide by zero not possible\n    const costInMillis: number = cost / quotaPerMillis;\n\n    const walletCeilingMillis: number = Date.now();\n    let currentBalanceMillis: number = walletCeilingMillis - this.walletFloorMillis;\n    currentBalanceMillis = Math.min(currentBalanceMillis, this.MAX_BALANCE_MILLIS);\n    const pendingRemainingBalanceMillis: number = currentBalanceMillis - costInMillis;\n    if (pendingRemainingBalanceMillis >= 0) {\n      this.walletFloorMillis = walletCeilingMillis - pendingRemainingBalanceMillis;\n      return true;\n    }\n    // No changes to the wallet state\n    return false;\n  }\n}\n"]}