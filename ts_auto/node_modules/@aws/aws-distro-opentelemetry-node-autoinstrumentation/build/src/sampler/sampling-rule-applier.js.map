{"version":3,"file":"sampling-rule-applier.js","sourceRoot":"","sources":["../../../src/sampler/sampling-rule-applier.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AttributeValue, Attributes, Context, Link, SpanKind } from '@opentelemetry/api';\nimport { Resource } from '@opentelemetry/resources';\nimport { SamplingDecision, SamplingResult, TraceIdRatioBasedSampler } from '@opentelemetry/sdk-trace-base';\nimport {\n  ATTR_CLIENT_ADDRESS,\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_SERVER_ADDRESS,\n  ATTR_URL_FULL,\n  ATTR_URL_PATH,\n  CLOUDPLATFORMVALUES_AWS_LAMBDA,\n  SEMATTRS_AWS_LAMBDA_INVOKED_ARN,\n  SEMATTRS_HTTP_HOST,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_URL,\n  SEMRESATTRS_AWS_ECS_CLUSTER_ARN,\n  SEMRESATTRS_AWS_ECS_CONTAINER_ARN,\n  SEMRESATTRS_AWS_EKS_CLUSTER_ARN,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_FAAS_ID,\n  SEMRESATTRS_SERVICE_NAME,\n} from '@opentelemetry/semantic-conventions';\nimport { RateLimitingSampler } from './rate-limiting-sampler';\nimport { ISamplingRule, ISamplingStatistics, SamplingTargetDocument } from './remote-sampler.types';\nimport { SamplingRule } from './sampling-rule';\nimport { Statistics } from './statistics';\nimport { CLOUD_PLATFORM_MAPPING, attributeMatch, wildcardMatch } from './utils';\n\n// Max date time in JavaScript\nconst MAX_DATE_TIME_MILLIS: number = new Date(8_640_000_000_000_000).getTime();\n\nexport class SamplingRuleApplier {\n  public samplingRule: SamplingRule;\n  private reservoirSampler: RateLimitingSampler;\n  private fixedRateSampler: TraceIdRatioBasedSampler;\n  private statistics: Statistics;\n  private borrowingEnabled: boolean;\n  private reservoirExpiryTimeInMillis: number;\n\n  constructor(samplingRule: ISamplingRule, statistics: Statistics = new Statistics(), target?: SamplingTargetDocument) {\n    this.samplingRule = new SamplingRule(samplingRule);\n\n    this.fixedRateSampler = new TraceIdRatioBasedSampler(this.samplingRule.FixedRate);\n    if (samplingRule.ReservoirSize > 0) {\n      this.reservoirSampler = new RateLimitingSampler(1);\n    } else {\n      this.reservoirSampler = new RateLimitingSampler(0);\n    }\n\n    this.reservoirExpiryTimeInMillis = MAX_DATE_TIME_MILLIS;\n    this.statistics = statistics;\n    this.statistics.resetStatistics();\n    this.borrowingEnabled = true;\n\n    if (target) {\n      this.borrowingEnabled = false;\n      if (target.ReservoirQuota) {\n        this.reservoirSampler = new RateLimitingSampler(target.ReservoirQuota);\n      }\n\n      if (target.ReservoirQuotaTTL) {\n        this.reservoirExpiryTimeInMillis = new Date(target.ReservoirQuotaTTL * 1000).getTime();\n      } else {\n        this.reservoirExpiryTimeInMillis = Date.now();\n      }\n\n      if (target.FixedRate) {\n        this.fixedRateSampler = new TraceIdRatioBasedSampler(target.FixedRate);\n      }\n    }\n  }\n\n  public withTarget(target: SamplingTargetDocument): SamplingRuleApplier {\n    const newApplier: SamplingRuleApplier = new SamplingRuleApplier(this.samplingRule, this.statistics, target);\n    return newApplier;\n  }\n\n  public matches(attributes: Attributes, resource: Resource): boolean {\n    let httpTarget: AttributeValue | undefined = undefined;\n    let httpUrl: AttributeValue | undefined = undefined;\n    let httpMethod: AttributeValue | undefined = undefined;\n    let httpHost: AttributeValue | undefined = undefined;\n    let serviceName: AttributeValue | undefined = undefined;\n\n    if (attributes) {\n      httpTarget = attributes[SEMATTRS_HTTP_TARGET] ?? attributes[ATTR_URL_PATH];\n      httpUrl = attributes[SEMATTRS_HTTP_URL] ?? attributes[ATTR_URL_FULL];\n      httpMethod = attributes[SEMATTRS_HTTP_METHOD] ?? attributes[ATTR_HTTP_REQUEST_METHOD];\n      httpHost = attributes[SEMATTRS_HTTP_HOST] ?? attributes[ATTR_SERVER_ADDRESS] ?? attributes[ATTR_CLIENT_ADDRESS];\n    }\n\n    let serviceType: AttributeValue | undefined = undefined;\n    let resourceARN: AttributeValue | undefined = undefined;\n\n    if (resource) {\n      serviceName = resource.attributes[SEMRESATTRS_SERVICE_NAME] || '';\n      const cloudPlatform: AttributeValue | undefined = resource.attributes[SEMRESATTRS_CLOUD_PLATFORM];\n      if (typeof cloudPlatform === 'string') {\n        serviceType = CLOUD_PLATFORM_MAPPING[cloudPlatform];\n      }\n      resourceARN = this.getArn(resource, attributes);\n    }\n\n    // target may be in url\n    if (httpTarget === undefined && typeof httpUrl === 'string') {\n      const schemeEndIndex: number = httpUrl.indexOf('://');\n      // For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format\n      // Per spec, url.full is always populated with scheme://\n      // If scheme is not present, assume it's bad instrumentation and ignore.\n      if (schemeEndIndex > -1) {\n        // urlparse(\"scheme://netloc/path;parameters?query#fragment\")\n        httpTarget = new URL(httpUrl).pathname;\n        if (httpTarget === '') httpTarget = '/';\n      }\n    } else if (httpTarget === undefined && httpUrl === undefined) {\n      // When missing, the URL Path is assumed to be '/'\n      httpTarget = '/';\n    }\n\n    return (\n      attributeMatch(attributes, this.samplingRule.Attributes) &&\n      wildcardMatch(this.samplingRule.Host, httpHost) &&\n      wildcardMatch(this.samplingRule.HTTPMethod, httpMethod) &&\n      wildcardMatch(this.samplingRule.ServiceName, serviceName) &&\n      wildcardMatch(this.samplingRule.URLPath, httpTarget) &&\n      wildcardMatch(this.samplingRule.ServiceType, serviceType) &&\n      wildcardMatch(this.samplingRule.ResourceARN, resourceARN)\n    );\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: Attributes,\n    links: Link[]\n  ): SamplingResult {\n    let hasBorrowed: boolean = false;\n    let result: SamplingResult = { decision: SamplingDecision.NOT_RECORD };\n\n    const nowInMillis: number = Date.now();\n    const reservoirExpired: boolean = nowInMillis >= this.reservoirExpiryTimeInMillis;\n\n    if (!reservoirExpired) {\n      result = this.reservoirSampler.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n      hasBorrowed = this.borrowingEnabled && result.decision !== SamplingDecision.NOT_RECORD;\n    }\n\n    if (result.decision === SamplingDecision.NOT_RECORD) {\n      result = this.fixedRateSampler.shouldSample(context, traceId);\n    }\n\n    this.statistics.SampleCount += result.decision !== SamplingDecision.NOT_RECORD ? 1 : 0;\n    this.statistics.BorrowCount += hasBorrowed ? 1 : 0;\n    this.statistics.RequestCount += 1;\n\n    return result;\n  }\n\n  public snapshotStatistics(): ISamplingStatistics {\n    const statisticsCopy: ISamplingStatistics = { ...this.statistics };\n    this.statistics.resetStatistics();\n    return statisticsCopy;\n  }\n\n  private getArn(resource: Resource, attributes: Attributes): AttributeValue | undefined {\n    let arn: AttributeValue | undefined =\n      resource.attributes[SEMRESATTRS_AWS_ECS_CONTAINER_ARN] ||\n      resource.attributes[SEMRESATTRS_AWS_ECS_CLUSTER_ARN] ||\n      resource.attributes[SEMRESATTRS_AWS_EKS_CLUSTER_ARN];\n\n    if (arn === undefined && resource?.attributes[SEMRESATTRS_CLOUD_PLATFORM] === CLOUDPLATFORMVALUES_AWS_LAMBDA) {\n      arn = this.getLambdaArn(resource, attributes);\n    }\n    return arn;\n  }\n\n  private getLambdaArn(resource: Resource, attributes: Attributes): AttributeValue | undefined {\n    const arn: AttributeValue | undefined =\n      resource?.attributes[SEMRESATTRS_FAAS_ID] || attributes[SEMATTRS_AWS_LAMBDA_INVOKED_ARN];\n    return arn;\n  }\n}\n"]}