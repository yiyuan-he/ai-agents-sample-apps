{"version":3,"file":"fallback-sampler.js","sourceRoot":"","sources":["../../../src/sampler/fallback-sampler.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAGtC,kEAAoH;AACpH,mEAA8D;AAE9D,kGAAkG;AAClG,MAAa,eAAe;IAI1B;QACE,IAAI,CAAC,gBAAgB,GAAG,IAAI,yCAAwB,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,mBAAmB,GAAG,IAAI,2CAAmB,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,YAAY,CACV,OAAgB,EAChB,OAAe,EACf,QAAgB,EAChB,QAAkB,EAClB,UAAsB,EACtB,KAAa;QAEb,MAAM,cAAc,GAAmB,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAC1E,OAAO,EACP,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,KAAK,CACN,CAAC;QAEF,IAAI,cAAc,CAAC,QAAQ,KAAK,iCAAgB,CAAC,UAAU,EAAE;YAC3D,OAAO,cAAc,CAAC;SACvB;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAEM,QAAQ;QACb,OAAO,mGAAmG,CAAC;IAC7G,CAAC;CACF;AApCD,0CAoCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Attributes, Context, Link, SpanKind } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult, TraceIdRatioBasedSampler } from '@opentelemetry/sdk-trace-base';\nimport { RateLimitingSampler } from './rate-limiting-sampler';\n\n// FallbackSampler samples 1 req/sec and additional 5% of requests using TraceIdRatioBasedSampler.\nexport class FallbackSampler implements Sampler {\n  private fixedRateSampler: TraceIdRatioBasedSampler;\n  private rateLimitingSampler: RateLimitingSampler;\n\n  constructor() {\n    this.fixedRateSampler = new TraceIdRatioBasedSampler(0.05);\n    this.rateLimitingSampler = new RateLimitingSampler(1);\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: Attributes,\n    links: Link[]\n  ): SamplingResult {\n    const samplingResult: SamplingResult = this.rateLimitingSampler.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n\n    if (samplingResult.decision !== SamplingDecision.NOT_RECORD) {\n      return samplingResult;\n    }\n\n    return this.fixedRateSampler.shouldSample(context, traceId);\n  }\n\n  public toString(): string {\n    return 'FallbackSampler{fallback sampling with sampling config of 1 req/sec and 5% of additional requests';\n  }\n}\n"]}