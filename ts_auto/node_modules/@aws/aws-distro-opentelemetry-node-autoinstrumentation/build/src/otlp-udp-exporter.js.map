{"version":3,"file":"otlp-udp-exporter.js","sourceRoot":"","sources":["../../src/otlp-udp-exporter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as dgram from 'dgram';\nimport { diag } from '@opentelemetry/api';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\nimport { ProtobufTraceSerializer } from '@opentelemetry/otlp-transformer';\nimport { SpanExporter, ReadableSpan } from '@opentelemetry/sdk-trace-base';\n\nconst DEFAULT_ENDPOINT = '127.0.0.1:2000';\nconst PROTOCOL_HEADER = '{\"format\":\"json\",\"version\":1}\\n';\nconst DEFAULT_FORMAT_OTEL_TRACES_BINARY_PREFIX = 'T1S';\n\nexport class UdpExporter {\n  private _endpoint: string;\n  private _host: string;\n  private _port: number;\n  private _socket: dgram.Socket;\n\n  constructor(endpoint?: string) {\n    this._endpoint = endpoint || DEFAULT_ENDPOINT;\n    [this._host, this._port] = this._parseEndpoint(this._endpoint);\n    this._socket = dgram.createSocket('udp4');\n    this._socket.unref();\n  }\n\n  sendData(data: Uint8Array, signalFormatPrefix: string): void {\n    const base64EncodedString = Buffer.from(data).toString('base64');\n    const message = `${PROTOCOL_HEADER}${signalFormatPrefix}${base64EncodedString}`;\n\n    try {\n      this._socket.send(Buffer.from(message, 'utf-8'), this._port, this._host, err => {\n        if (err) {\n          throw err;\n        }\n      });\n    } catch (err) {\n      diag.error('Error sending UDP data: %s', err);\n      throw err;\n    }\n  }\n\n  shutdown(): void {\n    this._socket.close();\n  }\n\n  private _parseEndpoint(endpoint: string): [string, number] {\n    try {\n      const [host, port] = endpoint.split(':');\n      return [host, parseInt(port, 10)];\n    } catch (err) {\n      throw new Error(`Invalid endpoint: ${endpoint}`);\n    }\n  }\n}\n\nexport class OTLPUdpSpanExporter implements SpanExporter {\n  private _udpExporter: UdpExporter;\n  private _signalPrefix: string;\n  private _endpoint: string;\n\n  constructor(endpoint?: string, _signalPrefix?: string) {\n    this._endpoint = endpoint || DEFAULT_ENDPOINT;\n    this._udpExporter = new UdpExporter(this._endpoint);\n    this._signalPrefix = _signalPrefix || DEFAULT_FORMAT_OTEL_TRACES_BINARY_PREFIX;\n  }\n\n  export(spans: ReadableSpan[], resultCallback: (result: ExportResult) => void): void {\n    const serializedData = ProtobufTraceSerializer.serializeRequest(spans);\n    if (serializedData == null) {\n      return;\n    }\n    try {\n      this._udpExporter.sendData(serializedData, this._signalPrefix);\n      return resultCallback({ code: ExportResultCode.SUCCESS });\n    } catch (err) {\n      diag.error('Error exporting spans: %s', err);\n      return resultCallback({ code: ExportResultCode.FAILED });\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /** Shutdown exporter. */\n  shutdown(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this._udpExporter.shutdown();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n"]}