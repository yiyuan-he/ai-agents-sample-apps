{"version":3,"file":"aws-opentelemetry-configurator.js","sourceRoot":"","sources":["../../src/aws-opentelemetry-configurator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Modifications Copyright The OpenTelemetry Authors. Licensed under the Apache License 2.0 License.\n\nimport { TextMapPropagator, diag } from '@opentelemetry/api';\nimport { getPropagator } from '@opentelemetry/auto-configuration-propagators';\nimport { getResourceDetectors as getResourceDetectorsFromEnv } from '@opentelemetry/auto-instrumentations-node';\nimport { ENVIRONMENT, TracesSamplerValues, getEnv, getEnvWithoutDefaults } from '@opentelemetry/core';\nimport { OTLPMetricExporter as OTLPGrpcOTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-grpc';\nimport {\n  AggregationTemporalityPreference,\n  OTLPMetricExporter as OTLPHttpOTLPMetricExporter,\n} from '@opentelemetry/exporter-metrics-otlp-http';\nimport { OTLPTraceExporter as OTLPGrpcTraceExporter } from '@opentelemetry/exporter-trace-otlp-grpc';\nimport { OTLPTraceExporter as OTLPHttpTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { OTLPTraceExporter as OTLPProtoTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { ZipkinExporter } from '@opentelemetry/exporter-zipkin';\nimport { AWSXRayIdGenerator } from '@opentelemetry/id-generator-aws-xray';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { awsEc2DetectorSync, awsEcsDetectorSync, awsEksDetectorSync } from '@opentelemetry/resource-detector-aws';\nimport {\n  Detector,\n  DetectorSync,\n  Resource,\n  ResourceDetectionConfig,\n  detectResourcesSync,\n  envDetectorSync,\n  hostDetector,\n  processDetector,\n} from '@opentelemetry/resources';\nimport {\n  Aggregation,\n  AggregationSelector,\n  InstrumentType,\n  MeterProvider,\n  PeriodicExportingMetricReader,\n  PushMetricExporter,\n} from '@opentelemetry/sdk-metrics';\nimport { NodeSDKConfiguration } from '@opentelemetry/sdk-node';\nimport {\n  AlwaysOffSampler,\n  AlwaysOnSampler,\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n  IdGenerator,\n  ParentBasedSampler,\n  Sampler,\n  SimpleSpanProcessor,\n  SpanExporter,\n  SpanProcessor,\n  TraceIdRatioBasedSampler,\n} from '@opentelemetry/sdk-trace-base';\nimport { SEMRESATTRS_TELEMETRY_AUTO_VERSION } from '@opentelemetry/semantic-conventions';\nimport { AlwaysRecordSampler } from './always-record-sampler';\nimport { AttributePropagatingSpanProcessorBuilder } from './attribute-propagating-span-processor-builder';\nimport { AwsBatchUnsampledSpanProcessor } from './aws-batch-unsampled-span-processor';\nimport { AwsMetricAttributesSpanExporterBuilder } from './aws-metric-attributes-span-exporter-builder';\nimport { AwsSpanMetricsProcessorBuilder } from './aws-span-metrics-processor-builder';\nimport { OTLPAwsSpanExporter } from './otlp-aws-span-exporter';\nimport { OTLPUdpSpanExporter } from './otlp-udp-exporter';\nimport { AwsXRayRemoteSampler } from './sampler/aws-xray-remote-sampler';\n// This file is generated via `npm run compile`\nimport { LIB_VERSION } from './version';\n\nconst XRAY_OTLP_ENDPOINT_PATTERN = '^https://xray\\\\.([a-z0-9-]+)\\\\.amazonaws\\\\.com/v1/traces$';\n\nconst APPLICATION_SIGNALS_ENABLED_CONFIG: string = 'OTEL_AWS_APPLICATION_SIGNALS_ENABLED';\nconst APPLICATION_SIGNALS_EXPORTER_ENDPOINT_CONFIG: string = 'OTEL_AWS_APPLICATION_SIGNALS_EXPORTER_ENDPOINT';\nconst METRIC_EXPORT_INTERVAL_CONFIG: string = 'OTEL_METRIC_EXPORT_INTERVAL';\nconst DEFAULT_METRIC_EXPORT_INTERVAL_MILLIS: number = 60000;\nexport const AWS_LAMBDA_FUNCTION_NAME_CONFIG: string = 'AWS_LAMBDA_FUNCTION_NAME';\nconst AWS_XRAY_DAEMON_ADDRESS_CONFIG: string = 'AWS_XRAY_DAEMON_ADDRESS';\nconst FORMAT_OTEL_SAMPLED_TRACES_BINARY_PREFIX = 'T1S';\nconst FORMAT_OTEL_UNSAMPLED_TRACES_BINARY_PREFIX = 'T1U';\n// Follow Python SDK Impl to set the max span batch size\n// which will reduce the chance of UDP package size is larger than 64KB\nconst LAMBDA_SPAN_EXPORT_BATCH_SIZE = 10;\n\n/**\n * Aws Application Signals Config Provider creates a configuration object that can be provided to\n * the OTel NodeJS SDK for Auto Instrumentation with Application Signals Functionality.\n *\n * The config includes:\n *  - Use AlwaysRecordSampler (wraps around a specified Sampler) to record all spans.\n *  - Add SpanMetricsProcessor to create metrics.\n *  - Add AttributePropagatingSpanProcessor to propagate span attributes from parent to child spans.\n *  - Add AwsMetricAttributesSpanExporter to add more attributes to all spans.\n *\n *  You can control when these customizations are applied using the environment variable\n *  OTEL_AWS_APPLICATION_SIGNALS_ENABLED. This flag is disabled by default.\n */\nexport class AwsOpentelemetryConfigurator {\n  private resource: Resource;\n  private instrumentations: Instrumentation[];\n  private idGenerator: IdGenerator;\n  private sampler: Sampler;\n  private spanProcessors: SpanProcessor[];\n  private propagator: TextMapPropagator;\n\n  /**\n   * The constructor will setup the AwsOpentelemetryConfigurator object to be able to provide a\n   * configuration for ADOT JavaScript Auto-Instrumentation.\n   *\n   * The `instrumentations` are the desired Node auto-instrumentations to be used when using ADOT JavaScript.\n   * The auto-Instrumentions are usually populated from OTel's `getNodeAutoInstrumentations()` method from the\n   * `@opentelemetry/auto-instrumentations-node` NPM package, and may have instrumentation patching applied.\n   *\n   * @constructor\n   * @param {Instrumentation[]} instrumentations - Auto-Instrumentations to be added to the ADOT Config\n   */\n  public constructor(instrumentations: Instrumentation[], useXraySampler: boolean = false) {\n    /*\n     * Set and Detect Resources via Resource Detectors\n     *\n     * The configurator must create and detect resources in order to populate any detected\n     * resources into the Resource that is provided to the processors, exporters, and samplers\n     * that are instantiated in the configurator. Otherwise, if only OTel handles resource\n     * detection in the SDK, the AWS processors/exporters/samplers will lack such detected\n     * resources in their respective resources.\n     */\n    let autoResource: Resource = new Resource({});\n    autoResource = this.customizeVersions(autoResource);\n\n    // The following if/else block is based on upstream's logic\n    // https://github.com/open-telemetry/opentelemetry-js/blob/95edbd9992434f31f50532fedb3c7e8db5164479/experimental/packages/opentelemetry-sdk-node/src/sdk.ts#L125-L129\n    // In all cases, we want to include the Env Detector (Sync) and the AWS Resource Detectors\n    let defaultDetectors: (Detector | DetectorSync)[] = [];\n    if (process.env.OTEL_NODE_RESOURCE_DETECTORS != null) {\n      defaultDetectors = getResourceDetectorsFromEnv();\n      // Add Env/AWS Resource Detectors if not present\n      const resourceDetectorsFromEnv: string[] = process.env.OTEL_NODE_RESOURCE_DETECTORS.split(',');\n      if (!resourceDetectorsFromEnv.includes('aws')) {\n        defaultDetectors.push(awsEc2DetectorSync, awsEcsDetectorSync, awsEksDetectorSync);\n      }\n      if (!resourceDetectorsFromEnv.includes('env')) {\n        defaultDetectors.push(envDetectorSync);\n      }\n    } else if (isLambdaEnvironment()) {\n      // If in Lambda environment, only keep env detector as default\n      defaultDetectors.push(envDetectorSync);\n    } else {\n      /*\n       * envDetectorSync is used as opposed to envDetector (async), so it is guaranteed that the\n       * resource is populated with configured OTEL_RESOURCE_ATTRIBUTES or OTEL_SERVICE_NAME env\n       * var values by the time that this class provides a configuration to the OTel SDK.\n       *\n       * envDetectorSync needs to be last so it can override any conflicting resource attributes.\n       */\n      defaultDetectors = [\n        processDetector,\n        hostDetector,\n        awsEc2DetectorSync,\n        awsEcsDetectorSync,\n        awsEksDetectorSync,\n        envDetectorSync,\n      ];\n    }\n\n    const internalConfig: ResourceDetectionConfig = {\n      detectors: defaultDetectors,\n    };\n\n    autoResource = autoResource.merge(detectResourcesSync(internalConfig));\n    this.resource = autoResource;\n\n    this.instrumentations = instrumentations;\n    this.propagator = getPropagator();\n\n    // TODO: Consider removing AWSXRayIdGenerator as it is not needed\n    // Similarly to Java, always use AWS X-Ray Id Generator\n    // https://github.com/aws-observability/aws-otel-java-instrumentation/blob/a011b8cc29ee32b7f668c04ccfdf64cd30de467c/awsagentprovider/src/main/java/software/amazon/opentelemetry/javaagent/providers/AwsTracerCustomizerProvider.java#L36\n    this.idGenerator = new AWSXRayIdGenerator();\n\n    this.sampler = AwsOpentelemetryConfigurator.customizeSampler(\n      customBuildSamplerFromEnv(this.resource, useXraySampler)\n    );\n\n    // default SpanProcessors with Span Exporters wrapped inside AwsMetricAttributesSpanExporter\n    const awsSpanProcessorProvider: AwsSpanProcessorProvider = new AwsSpanProcessorProvider(this.resource);\n    this.spanProcessors = awsSpanProcessorProvider.getSpanProcessors();\n    AwsOpentelemetryConfigurator.customizeSpanProcessors(this.spanProcessors, this.resource);\n  }\n\n  private customizeVersions(autoResource: Resource): Resource {\n    // eslint-disable-next-line @typescript-eslint/typedef\n    const DISTRO_VERSION: string = LIB_VERSION;\n    autoResource.attributes[SEMRESATTRS_TELEMETRY_AUTO_VERSION] = DISTRO_VERSION + '-aws';\n    diag.debug(\n      `@aws/aws-distro-opentelemetry-node-autoinstrumentation - version: ${autoResource.attributes[SEMRESATTRS_TELEMETRY_AUTO_VERSION]}`\n    );\n    return autoResource;\n  }\n\n  public configure(): Partial<NodeSDKConfiguration> {\n    // config.autoDetectResources is set to False, as the resources are detected and added to the\n    // resource ahead of time. The resource is needed to be populated ahead of time instead of letting\n    // the OTel Node SDK do the population work because the constructed resource was required to build\n    // the sampler (if using XRay sampler) and the AwsMetricAttributesSpanExporter and AwsSpanMetricsProcessor\n    const config: Partial<NodeSDKConfiguration> = {\n      instrumentations: this.instrumentations,\n      resource: this.resource,\n      idGenerator: this.idGenerator,\n      sampler: this.sampler,\n      // Error message 'Exporter \"otlp\" requested through environment variable is unavailable.'\n      // will appear from BasicTracerProvider that is used in the OTel JS SDK, even though the\n      // span processors are specified\n      // https://github.com/open-telemetry/opentelemetry-js/issues/3449\n      spanProcessors: this.spanProcessors,\n      autoDetectResources: false,\n      textMapPropagator: this.propagator,\n    };\n\n    return config;\n  }\n\n  static isApplicationSignalsEnabled(): boolean {\n    const isApplicationSignalsEnabled: string | undefined = process.env[APPLICATION_SIGNALS_ENABLED_CONFIG];\n    if (isApplicationSignalsEnabled === undefined) {\n      return false;\n    }\n\n    return isApplicationSignalsEnabled.toLowerCase() === 'true';\n  }\n\n  static customizeSpanProcessors(spanProcessors: SpanProcessor[], resource: Resource): void {\n    if (!AwsOpentelemetryConfigurator.isApplicationSignalsEnabled()) {\n      return;\n    }\n\n    diag.info('AWS Application Signals enabled.');\n\n    let exportIntervalMillis: number = Number(process.env[METRIC_EXPORT_INTERVAL_CONFIG]);\n    diag.debug(`AWS Application Signals Metrics export interval: ${exportIntervalMillis}`);\n\n    if (isNaN(exportIntervalMillis) || exportIntervalMillis.valueOf() > DEFAULT_METRIC_EXPORT_INTERVAL_MILLIS) {\n      exportIntervalMillis = DEFAULT_METRIC_EXPORT_INTERVAL_MILLIS;\n\n      diag.info(`AWS Application Signals metrics export interval capped to ${exportIntervalMillis}`);\n    }\n\n    spanProcessors.push(AttributePropagatingSpanProcessorBuilder.create().build());\n\n    if (isXrayOtlpEndpoint(process.env['OTEL_EXPORTER_OTLP_TRACES_ENDPOINT'])) {\n      return;\n    }\n\n    const applicationSignalsMetricExporter: PushMetricExporter =\n      ApplicationSignalsExporterProvider.Instance.createExporter();\n    const periodicExportingMetricReader: PeriodicExportingMetricReader = new PeriodicExportingMetricReader({\n      exporter: applicationSignalsMetricExporter,\n      exportIntervalMillis: exportIntervalMillis,\n    });\n\n    // Register BatchUnsampledSpanProcessor to export unsampled traces in Lambda\n    // when Application Signals enabled\n    if (isLambdaEnvironment() && !hasCustomOtlpTraceEndpoint()) {\n      const udpSpanExporter = new OTLPUdpSpanExporter(\n        getXrayDaemonEndpoint(),\n        FORMAT_OTEL_UNSAMPLED_TRACES_BINARY_PREFIX\n      );\n      const configuredExporter = AwsMetricAttributesSpanExporterBuilder.create(udpSpanExporter, resource).build();\n      spanProcessors.push(\n        new AwsBatchUnsampledSpanProcessor(configuredExporter, {\n          maxExportBatchSize: getSpanExportBatchSize(),\n        })\n      );\n      diag.info('Enabled batch unsampled span processor for Lambda environment.');\n    }\n\n    // Disable Application Metrics for Lambda environment\n    if (!isLambdaEnvironment()) {\n      const meterProvider: MeterProvider = new MeterProvider({\n        /** Resource associated with metric telemetry  */\n        resource: resource,\n        readers: [periodicExportingMetricReader],\n      });\n      spanProcessors.push(\n        AwsSpanMetricsProcessorBuilder.create(\n          meterProvider,\n          resource,\n          meterProvider.forceFlush.bind(meterProvider)\n        ).build()\n      );\n    }\n  }\n\n  static customizeSampler(sampler: Sampler): Sampler {\n    if (AwsOpentelemetryConfigurator.isApplicationSignalsEnabled()) {\n      return AlwaysRecordSampler.create(sampler);\n    }\n    return sampler;\n  }\n}\n\nexport function customBuildSamplerFromEnv(resource: Resource, useXraySampler: boolean = false): Sampler {\n  if (useXraySampler || process.env.OTEL_TRACES_SAMPLER === 'xray') {\n    const samplerArgumentEnv: string | undefined = process.env.OTEL_TRACES_SAMPLER_ARG;\n    let endpoint: string | undefined = undefined;\n    let pollingInterval: number | undefined = undefined;\n\n    if (samplerArgumentEnv !== undefined) {\n      const args: string[] = samplerArgumentEnv.split(',');\n      for (const arg of args) {\n        const equalIndex: number = arg.indexOf('=');\n        if (equalIndex === -1) {\n          continue;\n        }\n        const keyValue: string[] = [arg.substring(0, equalIndex), arg.substring(equalIndex + 1)];\n        if (keyValue[0] === 'endpoint') {\n          endpoint = keyValue[1];\n        } else if (keyValue[0] === 'polling_interval') {\n          pollingInterval = Number(keyValue[1]);\n          if (isNaN(pollingInterval)) {\n            pollingInterval = undefined;\n            diag.error('polling_interval in OTEL_TRACES_SAMPLER_ARG must be a valid number');\n          }\n        }\n      }\n    }\n\n    diag.info('AWS XRay Sampler enabled');\n    diag.debug(`XRay Sampler Endpoint: ${endpoint}`);\n    diag.debug(`XRay Sampler Polling Interval: ${pollingInterval}`);\n    return new AwsXRayRemoteSampler({ resource: resource, endpoint: endpoint, pollingInterval: pollingInterval });\n  }\n\n  return buildSamplerFromEnv();\n}\n\nexport class ApplicationSignalsExporterProvider {\n  private static _instance: ApplicationSignalsExporterProvider;\n  private constructor() {}\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  public createExporter(): PushMetricExporter {\n    let protocol: string | undefined = process.env['OTEL_EXPORTER_OTLP_METRICS_PROTOCOL'];\n    if (protocol === undefined) {\n      protocol = process.env['OTEL_EXPORTER_OTLP_PROTOCOL'];\n    }\n    if (protocol === undefined) {\n      protocol = 'grpc';\n    }\n\n    diag.debug(`AWS Application Signals export protocol: ${protocol}`);\n\n    const temporalityPreference: AggregationTemporalityPreference = AggregationTemporalityPreference.DELTA;\n    const aggregationPreference: AggregationSelector = this.aggregationSelector;\n\n    if (protocol === 'http/protobuf') {\n      let applicationSignalsEndpoint: string | undefined = process.env[APPLICATION_SIGNALS_EXPORTER_ENDPOINT_CONFIG];\n      if (applicationSignalsEndpoint === undefined) {\n        applicationSignalsEndpoint = 'http://localhost:4316/v1/metrics';\n      }\n      diag.debug(`AWS Application Signals export endpoint: ${applicationSignalsEndpoint}`);\n\n      return new OTLPHttpOTLPMetricExporter({\n        url: applicationSignalsEndpoint,\n        temporalityPreference: temporalityPreference,\n        aggregationPreference: aggregationPreference,\n      });\n    }\n    if (protocol === 'grpc') {\n      let applicationSignalsEndpoint: string | undefined = process.env[APPLICATION_SIGNALS_EXPORTER_ENDPOINT_CONFIG];\n      if (applicationSignalsEndpoint === undefined) {\n        applicationSignalsEndpoint = 'http://localhost:4315';\n      }\n      diag.debug(`AWS Application Signals export endpoint: ${applicationSignalsEndpoint}`);\n\n      return new OTLPGrpcOTLPMetricExporter({\n        url: applicationSignalsEndpoint,\n        temporalityPreference: temporalityPreference,\n        aggregationPreference: aggregationPreference,\n      });\n    }\n\n    throw new Error(`Unsupported AWS Application Signals export protocol: ${protocol}`);\n  }\n\n  private aggregationSelector: AggregationSelector = (instrumentType: InstrumentType) => {\n    switch (instrumentType) {\n      case InstrumentType.HISTOGRAM: {\n        return Aggregation.ExponentialHistogram();\n      }\n    }\n    return Aggregation.Default();\n  };\n}\n\n// The OpenTelemetry Authors code\n//\n// ADOT JS needs the logic to (1) get the SpanExporters from Env and then (2) wrap the SpanExporters with AwsMetricAttributesSpanExporter\n// However, the logic to perform (1) is only in the `TracerProviderWithEnvExporters` class, which is not exported publicly.\n// `TracerProviderWithEnvExporters` is also responsible for (3) wrapping the SpanExporters inside the Simple/Batch SpanProcessors\n// which must happen after (2). Thus in order to perform (1), (2), and (3), we need to add these non-exported methods here.\n//\n// https://github.com/open-telemetry/opentelemetry-js/blob/01cea7caeb130142cc017f77ea74834a35d0e8d6/experimental/packages/opentelemetry-sdk-node/src/TracerProviderWithEnvExporter.ts\n//\n// This class is a modified version of TracerProviderWithEnvExporters (extends NodeTracerProvider), without\n// any of the TracerProvider functionalities. The AwsSpanProcessorProvider retains the functionality to\n// only create the default span processors with exporters specified in `OTEL_TRACES_EXPORTER`. These span\n// exporters are wrapped with AwsMetricAttributesSpanExporter when configuring the configureSpanProcessors\n//\n// Unlike `TracerProviderWithEnvExporters`, `AwsSpanProcessorProvider` does not extend `NodeTracerProvider`.\n// The following class member variables are unmodified:\n//   - _configuredExporters\n//   - _spanProcessors\n// The following class member variables are modified:\n//   - _hasSpanProcessors (removed)\n//   - resource (new)\n// The following methods are unmodified:\n//   - configureOtlp(), getOtlpProtocol(), configureJaeger(), createExportersFromList(), _getSpanExporter(), filterBlanksAndNulls()\n// The following methods are modified:\n//   - constructor() (modified)\n//     - removed usage of `this.addSpanProcessor(...)`, which calls `super.addSpanProcessor(...)`\n//       to register it to the BasicTracerProvider, which should be done later by the OTel JS SDK\n//   - configureSpanProcessors(exporters) (modified)\n//     - wrap exporters with customizeSpanExporter()\n//   - customizeSpanExporter() (new)\n//   - getSpanProcessors() (new)\n//   - override addSpanProcessor() (removed)\n//   - override register() (removed)\n//\n// TODO: `TracerProviderWithEnvExporters` is not exported, thus its useful static methods that\n// provides some default SpanExporter configurations are unavailable. Ideally, we could contribute\n// to upstream to export `TracerProviderWithEnvExporters`\nexport class AwsSpanProcessorProvider {\n  private _configuredExporters: SpanExporter[] = [];\n  private _spanProcessors: SpanProcessor[] = [];\n  private resource: Resource;\n\n  static configureOtlp(): SpanExporter {\n    const otlp_exporter_traces_endpoint = process.env['OTEL_EXPORTER_OTLP_TRACES_ENDPOINT'];\n    // eslint-disable-next-line @typescript-eslint/typedef\n    let protocol = this.getOtlpProtocol();\n\n    // If `isLambdaEnvironment` is true, we will default to exporting OTel spans via `udp_exporter` to Fluxpump,\n    // regardless of whether `AppSignals` is true or false.\n    // However, if the customer has explicitly set the `OTEL_EXPORTER_OTLP_TRACES_ENDPOINT`,\n    // we will continue using the `otlp_exporter` to send OTel traces to the specified endpoint.\n    if (!hasCustomOtlpTraceEndpoint() && isLambdaEnvironment()) {\n      protocol = 'udp';\n    }\n    switch (protocol) {\n      case 'grpc':\n        return new OTLPGrpcTraceExporter();\n      case 'http/json':\n        return new OTLPHttpTraceExporter();\n      case 'http/protobuf':\n        if (otlp_exporter_traces_endpoint && isXrayOtlpEndpoint(otlp_exporter_traces_endpoint)) {\n          diag.debug('Detected XRay OTLP Traces endpoint. Switching exporter to OtlpAwsSpanExporter');\n          return new OTLPAwsSpanExporter(otlp_exporter_traces_endpoint);\n        }\n        return new OTLPProtoTraceExporter();\n      case 'udp':\n        diag.debug('Detected AWS Lambda environment and enabling UDPSpanExporter');\n        return new OTLPUdpSpanExporter(getXrayDaemonEndpoint(), FORMAT_OTEL_SAMPLED_TRACES_BINARY_PREFIX);\n      default:\n        diag.warn(`Unsupported OTLP traces protocol: ${protocol}. Using http/protobuf.`);\n        if (otlp_exporter_traces_endpoint && isXrayOtlpEndpoint(otlp_exporter_traces_endpoint)) {\n          diag.debug('Detected XRay OTLP Traces endpoint. Switching exporter to OtlpAwsSpanExporter');\n          return new OTLPAwsSpanExporter(otlp_exporter_traces_endpoint);\n        }\n        return new OTLPProtoTraceExporter();\n    }\n  }\n\n  static getOtlpProtocol(): string {\n    // eslint-disable-next-line @typescript-eslint/typedef\n    const parsedEnvValues = getEnvWithoutDefaults();\n\n    return (\n      parsedEnvValues.OTEL_EXPORTER_OTLP_TRACES_PROTOCOL ??\n      parsedEnvValues.OTEL_EXPORTER_OTLP_PROTOCOL ??\n      getEnv().OTEL_EXPORTER_OTLP_TRACES_PROTOCOL ??\n      getEnv().OTEL_EXPORTER_OTLP_PROTOCOL\n    );\n  }\n\n  private static configureJaeger() {\n    // The JaegerExporter does not support being required in bundled\n    // environments. By delaying the require statement to here, we only crash when\n    // the exporter is actually used in such an environment.\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { JaegerExporter } = require('@opentelemetry/exporter-jaeger');\n      return new JaegerExporter();\n    } catch (e) {\n      throw new Error(\n        `Could not instantiate JaegerExporter. This could be due to the JaegerExporter's lack of support for bundling. If possible, use @opentelemetry/exporter-trace-otlp-proto instead. Original Error: ${e}`\n      );\n    }\n  }\n\n  protected static _registeredExporters: Map<string, () => SpanExporter> = new Map<string, () => SpanExporter>([\n    ['otlp', () => this.configureOtlp()],\n    ['zipkin', () => new ZipkinExporter()],\n    ['jaeger', () => this.configureJaeger()],\n    ['console', () => new ConsoleSpanExporter()],\n  ]);\n\n  public constructor(resource: Resource) {\n    this.resource = resource;\n\n    // eslint-disable-next-line @typescript-eslint/typedef\n    let traceExportersList = this.filterBlanksAndNulls(Array.from(new Set(getEnv().OTEL_TRACES_EXPORTER.split(','))));\n\n    if (traceExportersList[0] === 'none') {\n      diag.warn('OTEL_TRACES_EXPORTER contains \"none\". SDK will not be initialized.');\n    } else if (traceExportersList.length === 0) {\n      diag.warn('OTEL_TRACES_EXPORTER is empty. Using default otlp exporter.');\n\n      traceExportersList = ['otlp'];\n      this.createExportersFromList(traceExportersList);\n\n      this._spanProcessors = this.configureSpanProcessors(this._configuredExporters);\n    } else {\n      if (traceExportersList.length > 1 && traceExportersList.includes('none')) {\n        diag.warn('OTEL_TRACES_EXPORTER contains \"none\" along with other exporters. Using default otlp exporter.');\n        traceExportersList = ['otlp'];\n      }\n\n      this.createExportersFromList(traceExportersList);\n\n      if (this._configuredExporters.length > 0) {\n        this._spanProcessors = this.configureSpanProcessors(this._configuredExporters);\n      } else {\n        diag.warn('Unable to set up trace exporter(s) due to invalid exporter and/or protocol values.');\n      }\n    }\n  }\n\n  private createExportersFromList(exporterList: string[]) {\n    exporterList.forEach(exporterName => {\n      // eslint-disable-next-line @typescript-eslint/typedef\n      const exporter = this._getSpanExporter(exporterName);\n      if (exporter) {\n        this._configuredExporters.push(exporter);\n      } else {\n        diag.warn(`Unrecognized OTEL_TRACES_EXPORTER value: ${exporterName}.`);\n      }\n    });\n  }\n\n  protected _getSpanExporter(name: string): SpanExporter | undefined {\n    return AwsSpanProcessorProvider._registeredExporters.get(name)?.();\n  }\n\n  private configureSpanProcessors(exporters: SpanExporter[]): (BatchSpanProcessor | SimpleSpanProcessor)[] {\n    return exporters.map(exporter => {\n      const configuredExporter: SpanExporter = AwsSpanProcessorProvider.customizeSpanExporter(exporter, this.resource);\n      if (exporter instanceof ConsoleSpanExporter) {\n        return new SimpleSpanProcessor(configuredExporter);\n      } else {\n        return new BatchSpanProcessor(configuredExporter, {\n          maxExportBatchSize: getSpanExportBatchSize(),\n        });\n      }\n    });\n  }\n\n  private filterBlanksAndNulls(list: string[]): string[] {\n    return list.map(item => item.trim()).filter(s => s !== 'null' && s !== '');\n  }\n\n  public static customizeSpanExporter(spanExporter: SpanExporter, resource: Resource): SpanExporter {\n    if (AwsOpentelemetryConfigurator.isApplicationSignalsEnabled()) {\n      return AwsMetricAttributesSpanExporterBuilder.create(spanExporter, resource).build();\n    }\n    return spanExporter;\n  }\n\n  public getSpanProcessors(): SpanProcessor[] {\n    return this._spanProcessors;\n  }\n}\n// END The OpenTelemetry Authors code\n\n// The OpenTelemetry Authors code\n//\n// We need the logic to build the Sampler from user-defined Environment variables in order\n// to wrap the Sampler with an AlwaysRecord sampler. However, this logic is not exported\n// in an `index.ts` file, so the portion of code that does this is added here.\n//\n// TODO: Ideally, upstream's `buildSamplerFromEnv()` method should be exported\n// https://github.com/open-telemetry/opentelemetry-js/blob/f047db9da20a7d4394169f812b2d255d934883f1/packages/opentelemetry-sdk-trace-base/src/config.ts#L62\n//\n// An alternative method is to instantiate a new OTel JS Tracer with an empty config, which\n// would also have the (private+readonly) sampler from the `buildSamplerFromEnv()` method.\n// https://github.com/open-telemetry/opentelemetry-js/blob/01cea7caeb130142cc017f77ea74834a35d0e8d6/packages/opentelemetry-sdk-trace-base/src/Tracer.ts#L36-L53\nconst FALLBACK_OTEL_TRACES_SAMPLER: string = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO: number = 1;\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment: Required<ENVIRONMENT> = getEnv()): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(environment: Required<ENVIRONMENT>): number | undefined {\n  if (environment.OTEL_TRACES_SAMPLER_ARG === undefined || environment.OTEL_TRACES_SAMPLER_ARG === '') {\n    diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`);\n    return DEFAULT_RATIO;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/typedef\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n\nfunction getSpanExportBatchSize() {\n  if (isLambdaEnvironment()) {\n    return LAMBDA_SPAN_EXPORT_BATCH_SIZE;\n  }\n  return undefined;\n}\n\nexport function isLambdaEnvironment() {\n  // detect if running in AWS Lambda environment\n  return process.env[AWS_LAMBDA_FUNCTION_NAME_CONFIG] !== undefined;\n}\n\nfunction hasCustomOtlpTraceEndpoint() {\n  return process.env['OTEL_EXPORTER_OTLP_TRACES_ENDPOINT'] !== undefined;\n}\n\nfunction getXrayDaemonEndpoint() {\n  return process.env[AWS_XRAY_DAEMON_ADDRESS_CONFIG];\n}\n\nfunction isXrayOtlpEndpoint(otlpEndpoint: string | undefined) {\n  return otlpEndpoint && new RegExp(XRAY_OTLP_ENDPOINT_PATTERN).test(otlpEndpoint.toLowerCase());\n}\n\n// END The OpenTelemetry Authors code\n"]}