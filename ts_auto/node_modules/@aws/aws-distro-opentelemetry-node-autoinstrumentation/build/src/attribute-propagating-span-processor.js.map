{"version":3,"file":"attribute-propagating-span-processor.js","sourceRoot":"","sources":["../../src/attribute-propagating-span-processor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Span as APISpan, AttributeValue, Context, SpanKind, trace } from '@opentelemetry/api';\nimport { ReadableSpan, Span, SpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { AWS_ATTRIBUTE_KEYS } from './aws-attribute-keys';\nimport { AwsSpanProcessingUtil } from './aws-span-processing-util';\nimport { SEMRESATTRS_FAAS_ID } from '@opentelemetry/semantic-conventions';\n\n/**\n * AttributePropagatingSpanProcessor handles the propagation of attributes from parent spans to\n * child spans, specified in {@link attributesKeysToPropagate}. AttributePropagatingSpanProcessor\n * also propagates configurable data from parent spans to child spans, as a new attribute specified\n * by {@link propagationDataKey}. Propagated data can be configured via the {@link propagationDataExtractor}.\n * Span data propagation only starts from local root server/consumer spans, but from there will\n * be propagated to any descendant spans. If the span is a CONSUMER PROCESS with the parent also\n * a CONSUMER, it will set attribute AWS_CONSUMER_PARENT_SPAN_KIND as CONSUMER to indicate that\n * dependency metrics should not be generated for this span.\n */\nexport class AttributePropagatingSpanProcessor implements SpanProcessor {\n  private propagationDataExtractor: (span: ReadableSpan) => string;\n\n  private propagationDataKey: string;\n  private attributesKeysToPropagate: string[];\n\n  public static create(\n    propagationDataExtractor: (span: ReadableSpan) => string,\n    propagationDataKey: string,\n    attributesKeysToPropagate: string[]\n  ): AttributePropagatingSpanProcessor {\n    return new AttributePropagatingSpanProcessor(\n      propagationDataExtractor,\n      propagationDataKey,\n      attributesKeysToPropagate\n    );\n  }\n\n  private constructor(\n    propagationDataExtractor: (span: ReadableSpan) => string,\n    propagationDataKey: string,\n    attributesKeysToPropagate: string[]\n  ) {\n    this.propagationDataExtractor = propagationDataExtractor;\n    this.propagationDataKey = propagationDataKey;\n    this.attributesKeysToPropagate = attributesKeysToPropagate;\n  }\n\n  public onStart(span: Span, parentContext: Context): void {\n    // Divergence from Java/Python\n    // Workaround implemented in TypeScript. Calculation of isLocalRoot is not possible\n    // in `AwsSpanProcessingUtil.isLocalRoot` because the parent context is not accessible\n    // from a span. Therefore we pre-calculate its value here as an attribute.\n    AwsSpanProcessingUtil.setIsLocalRootInformation(span, parentContext);\n\n    const parentSpan: APISpan | undefined = trace.getSpan(parentContext);\n    let parentReadableSpan: Span | undefined = undefined;\n\n    // In Python and Java, the check is \"parentSpan is an instance of ReadableSpan\" is not possible\n    // in TypeScript because the check is not allowed for TypeScript interfaces (such as ReadableSpan).\n    // This is because JavaScript doesn't support interfaces, which is what TypeScript will compile to.\n    // `Span` is the only class that implements ReadableSpan, so check for instance of Span.\n    if (parentSpan instanceof Span) {\n      parentReadableSpan = parentSpan;\n\n      // Add the AWS_SDK_DESCENDANT attribute to the immediate child spans of AWS SDK span.\n      // This attribute helps the backend differentiate between SDK spans and their immediate\n      // children.\n      // It's assumed that the HTTP spans are immediate children of the AWS SDK span\n      // TODO: we should have a contract test to check the immediate children are HTTP span\n      if (AwsSpanProcessingUtil.isAwsSDKSpan(parentReadableSpan)) {\n        span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_SDK_DESCENDANT, 'true');\n      }\n\n      if (SpanKind.INTERNAL === parentReadableSpan.kind) {\n        for (const keyToPropagate of this.attributesKeysToPropagate) {\n          const valueToPropagate: AttributeValue | undefined = parentReadableSpan.attributes[keyToPropagate];\n          if (valueToPropagate !== undefined) {\n            span.setAttribute(keyToPropagate, valueToPropagate);\n          }\n        }\n      }\n\n      // We cannot guarantee that messaging.operation is set onStart, it could be set after the fact.\n      // To work around this, add the AWS_CONSUMER_PARENT_SPAN_KIND attribute if parent and child are\n      // both CONSUMER then check later if a metric should be generated.\n      if (this.isConsumerKind(span) && this.isConsumerKind(parentReadableSpan)) {\n        span.setAttribute(AWS_ATTRIBUTE_KEYS.AWS_CONSUMER_PARENT_SPAN_KIND, SpanKind[parentReadableSpan.kind]);\n      }\n\n      // If parent span contains \"cloud.resource_id\" or \"faas.id\" but not in child span, child span will be\n      // propagated with one of these attribute from parent. \"cloud.resource_id\" takes priority if it exists\n      const parentResourceId = AwsSpanProcessingUtil.getResourceId(parentSpan);\n      const resourceId = AwsSpanProcessingUtil.getResourceId(span);\n      if (!resourceId && parentResourceId) {\n        if (AwsSpanProcessingUtil.isKeyPresent(parentSpan, AwsSpanProcessingUtil.CLOUD_RESOURCE_ID)) {\n          span.setAttribute(AwsSpanProcessingUtil.CLOUD_RESOURCE_ID, parentResourceId);\n        } else {\n          span.setAttribute(SEMRESATTRS_FAAS_ID, parentResourceId);\n        }\n      }\n    }\n\n    let propagationData: AttributeValue | undefined = undefined;\n    if (AwsSpanProcessingUtil.isLocalRoot(span)) {\n      if (!this.isServerKind(span)) {\n        propagationData = this.propagationDataExtractor(span);\n      }\n    } else if (parentReadableSpan !== undefined && this.isServerKind(parentReadableSpan)) {\n      // In TypeScript, perform `parentReadableSpan !== undefined` check\n      // This should be done in Python and Java as well, but is not as of now\n      // If parentReadableSpan is not defined, the first `if statement` should occur,\n      // so that is why it is not a problem for Java/Python...\n      propagationData = this.propagationDataExtractor(parentReadableSpan);\n    } else {\n      // In TypeScript, perform `parentReadableSpan?` check (returns undefined if undefined)\n      // This should be done in Python and Java as well, but is not as of now\n      propagationData = parentReadableSpan?.attributes[this.propagationDataKey];\n    }\n\n    if (propagationData !== undefined) {\n      span.setAttribute(this.propagationDataKey, propagationData);\n    }\n  }\n\n  private isConsumerKind(span: ReadableSpan): boolean {\n    return SpanKind.CONSUMER === span.kind;\n  }\n\n  private isServerKind(span: ReadableSpan): boolean {\n    return SpanKind.SERVER === span.kind;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public onEnd(span: ReadableSpan): void {}\n\n  public shutdown(): Promise<void> {\n    return this.forceFlush();\n  }\n\n  public forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"]}