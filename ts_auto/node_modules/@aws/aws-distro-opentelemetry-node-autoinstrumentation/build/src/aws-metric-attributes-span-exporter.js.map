{"version":3,"file":"aws-metric-attributes-span-exporter.js","sourceRoot":"","sources":["../../src/aws-metric-attributes-span-exporter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Attributes } from '@opentelemetry/api';\nimport { ExportResult } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { AWS_ATTRIBUTE_KEYS } from './aws-attribute-keys';\nimport { AwsSpanProcessingUtil } from './aws-span-processing-util';\nimport {\n  AttributeMap,\n  DEPENDENCY_METRIC,\n  MetricAttributeGenerator,\n  SERVICE_METRIC,\n} from './metric-attribute-generator';\n\n/**\n * This exporter will update a span with metric attributes before exporting. It depends on a\n * {@link SpanExporter} being provided on instantiation, which the AwsMetricAttributesSpanExporter will\n * delegate export to. Also, a {@link MetricAttributeGenerator} must be provided, which will provide a\n * means to determine attributes which should be applied to the span. Finally, a {@link Resource} must\n * be provided, which is used to generate metric attributes.\n *\n * <p>This exporter should be coupled with the {@link AwsSpanMetricsProcessor} using the same\n * {@link MetricAttributeGenerator}. This will result in metrics and spans being produced with\n * common attributes.\n */\nexport class AwsMetricAttributesSpanExporter implements SpanExporter {\n  private delegate: SpanExporter;\n  private generator: MetricAttributeGenerator;\n  private resource: Resource;\n\n  /** Use {@link AwsMetricAttributesSpanExporterBuilder} to construct this exporter. */\n  static create(\n    delegate: SpanExporter,\n    generator: MetricAttributeGenerator,\n    resource: Resource\n  ): AwsMetricAttributesSpanExporter {\n    return new AwsMetricAttributesSpanExporter(delegate, generator, resource);\n  }\n\n  private constructor(delegate: SpanExporter, generator: MetricAttributeGenerator, resource: Resource) {\n    this.delegate = delegate;\n    this.generator = generator;\n    this.resource = resource;\n  }\n\n  public export(spans: ReadableSpan[], resultCallback: (result: ExportResult) => void): void {\n    const modifiedSpans: ReadableSpan[] = this.addMetricAttributes(spans);\n    this.delegate.export(modifiedSpans, resultCallback);\n  }\n\n  public shutdown(): Promise<void> {\n    return this.delegate.shutdown();\n  }\n\n  public forceFlush(): Promise<void> {\n    if (this.delegate.forceFlush !== undefined) {\n      return this.delegate.forceFlush();\n    }\n    return Promise.resolve();\n  }\n\n  private addMetricAttributes(spans: ReadableSpan[]): ReadableSpan[] {\n    const modifiedSpans: ReadableSpan[] = [];\n\n    spans.forEach((span: ReadableSpan) => {\n      // If the map has no items, no modifications are required. If there is one item, it means the\n      // span either produces Service or Dependency metric attributes, and in either case we want to\n      // modify the span with them. If there are two items, the span produces both Service and\n      // Dependency metric attributes indicating the span is a local dependency root. The Service\n      // Attributes must be a subset of the Dependency, with the exception of AWS_SPAN_KIND. The\n      // knowledge that the span is a local root is more important that knowing that it is a\n      // Dependency metric, so we take all the Dependency metrics but replace AWS_SPAN_KIND with\n      // LOCAL_ROOT.\n\n      const attributeMap: AttributeMap = this.generator.generateMetricAttributeMapFromSpan(span, this.resource);\n      let attributes: Attributes | undefined = {};\n\n      const generatesServiceMetrics: boolean = AwsSpanProcessingUtil.shouldGenerateServiceMetricAttributes(span);\n      const generatesDependencyMetrics: boolean = AwsSpanProcessingUtil.shouldGenerateDependencyMetricAttributes(span);\n\n      if (generatesServiceMetrics && generatesDependencyMetrics) {\n        attributes = this.copyAttributesWithLocalRoot(attributeMap[DEPENDENCY_METRIC]);\n      } else if (generatesServiceMetrics) {\n        attributes = attributeMap[SERVICE_METRIC];\n      } else if (generatesDependencyMetrics) {\n        attributes = attributeMap[DEPENDENCY_METRIC];\n      }\n\n      if (attributes !== undefined && Object.keys(attributes).length > 0) {\n        span = AwsMetricAttributesSpanExporter.wrapSpanWithAttributes(span, attributes);\n      }\n      modifiedSpans.push(span);\n    });\n\n    return modifiedSpans;\n  }\n\n  private copyAttributesWithLocalRoot(attributes: Attributes): Attributes {\n    const updatedAttributes: Attributes = { ...attributes };\n    delete updatedAttributes[AWS_ATTRIBUTE_KEYS.AWS_SPAN_KIND];\n    updatedAttributes[AWS_ATTRIBUTE_KEYS.AWS_SPAN_KIND] = AwsSpanProcessingUtil.LOCAL_ROOT;\n    return updatedAttributes;\n  }\n\n  /**\n   * {@link export} works with a {@link ReadableSpan}, which does not permit modification. However, we\n   * need to add derived metric attributes to the span. However, we are still able to modify the\n   * attributes in the span (the attributes itself is readonly, so it cannot be outright replaced).\n   * This may be risky.\n   *\n   * <p>See https://github.com/open-telemetry/opentelemetry-specification/issues/1089 for more\n   * context on this approach.\n   */\n  private static wrapSpanWithAttributes(span: ReadableSpan, attributes: Attributes): ReadableSpan {\n    const originalAttributes: Attributes = span.attributes;\n    const updateAttributes: Attributes = {};\n\n    for (const key in originalAttributes) {\n      updateAttributes[key] = originalAttributes[key];\n    }\n    for (const key in attributes) {\n      updateAttributes[key] = attributes[key];\n    }\n\n    // Bypass `readonly` restriction of ReadableSpan's attributes.\n    // Workaround provided from official TypeScript docs:\n    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#improved-control-over-mapped-type-modifiers\n    type Mutable<T> = { -readonly [P in keyof T]: T[P] };\n    const mutableSpan: Mutable<ReadableSpan> = span;\n    mutableSpan.attributes = updateAttributes;\n\n    return span;\n  }\n}\n"]}