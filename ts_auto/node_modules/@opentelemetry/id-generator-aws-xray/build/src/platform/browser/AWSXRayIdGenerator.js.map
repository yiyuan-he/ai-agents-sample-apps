{"version":3,"file":"AWSXRayIdGenerator.js","sourceRoot":"","sources":["../../../../src/platform/browser/AWSXRayIdGenerator.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,0EAI2C;AAE3C;;;GAGG;AACH,MAAa,kBAAkB;IAC7B;;;;OAIG;IACH,eAAe;QACb,OAAO,IAAA,oCAAe,EAAC,mBAAmB,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,IAAA,mCAAc,EAAC,mBAAmB,CAAC,CAAC;IAC7C,CAAC;CACF;AAjBD,gDAiBC;AAED,MAAM,uBAAuB,GAAG,KAAK,CAAC,mCAAc,GAAG,CAAC,CAAC,CAAC;AAE1D,SAAS,mBAAmB,CAAC,KAAa;IACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAClC,uBAAuB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;QACjE,qDAAqD;QACrD,IAAI,uBAAuB,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE;YACpC,uBAAuB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;SAClC;KACF;IAED,OAAO,MAAM,CAAC,YAAY,CAAC,KAAK,CAC9B,IAAI,EACJ,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAC5C,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '@opentelemetry/core';\n\nimport {\n  generateTraceId,\n  generateSpanId,\n  TRACE_ID_BYTES,\n} from '../../internal/xray-id-generation';\n\n/**\n * IdGenerator that generates trace IDs conforming to AWS X-Ray format.\n * https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\n */\nexport class AWSXRayIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits. The first 4 bytes correspond to the current\n   * time, in seconds, as per X-Ray trace ID format.\n   */\n  generateTraceId(): string {\n    return generateTraceId(generateRandomBytes);\n  }\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId(): string {\n    return generateSpanId(generateRandomBytes);\n  }\n}\n\nconst SHARED_CHAR_CODES_ARRAY = Array(TRACE_ID_BYTES * 2);\n\nfunction generateRandomBytes(bytes: number) {\n  for (let i = 0; i < bytes * 2; i++) {\n    SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n    // valid hex characters in the range 48-57 and 97-102\n    if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n      SHARED_CHAR_CODES_ARRAY[i] += 39;\n    }\n  }\n\n  return String.fromCharCode.apply(\n    null,\n    SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2)\n  );\n}\n"]}