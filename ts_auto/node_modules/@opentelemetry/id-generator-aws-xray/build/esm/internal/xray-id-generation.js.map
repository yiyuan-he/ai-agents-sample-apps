{"version":3,"file":"xray-id-generation.js","sourceRoot":"","sources":["../../../src/internal/xray-id-generation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAEpD,MAAM,CAAC,IAAM,cAAc,GAAG,EAAE,CAAC;AAEjC,IAAM,aAAa,GAAG,CAAC,CAAC;AACxB,IAAM,WAAW,GAAG,CAAC,CAAC;AAEtB,IAAM,eAAe,GAAG,kBAAkB,CAAC;AAI3C,MAAM,UAAU,eAAe,CAC7B,mBAAyC;IAEzC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACzD,IAAM,IAAI,GAAG,mBAAmB,CAAC,cAAc,GAAG,WAAW,CAAC,CAAC;IAC/D,+CAA+C;IAC/C,OAAO,KAAK,GAAG,IAAI,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,mBAAyC;IAEzC,IAAM,MAAM,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;IAClD,IAAI,MAAM,KAAK,cAAc,EAAE;QAC7B,6GAA6G;QAC7G,OAAO,eAAe,CAAC;KACxB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { INVALID_SPANID } from '@opentelemetry/api';\n\nexport const TRACE_ID_BYTES = 16;\n\nconst SPAN_ID_BYTES = 8;\nconst EPOCH_BYTES = 4;\n\nconst FALLBACK_SPANID = '0000000000000001';\n\ntype RandomBytesGenerator = (numBytes: number) => string;\n\nexport function generateTraceId(\n  generateRandomBytes: RandomBytesGenerator\n): string {\n  const epoch = Math.floor(Date.now() / 1000).toString(16);\n  const rand = generateRandomBytes(TRACE_ID_BYTES - EPOCH_BYTES);\n  // Starts with epoch so guaranteed to be valid.\n  return epoch + rand;\n}\n\nexport function generateSpanId(\n  generateRandomBytes: RandomBytesGenerator\n): string {\n  const spanId = generateRandomBytes(SPAN_ID_BYTES);\n  if (spanId === INVALID_SPANID) {\n    // Random was all zero. Very low chance, but in case it happens return a non-0 span ID to ensure it is valid.\n    return FALLBACK_SPANID;\n  }\n  return spanId;\n}\n"]}