{"version":3,"file":"AWSXRayIdGenerator.js","sourceRoot":"","sources":["../../../../src/platform/node/AWSXRayIdGenerator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAIH,OAAO,EACL,eAAe,EACf,cAAc,EACd,cAAc,GACf,MAAM,mCAAmC,CAAC;AAE3C;;;GAGG;AACH;IAAA;IAiBA,CAAC;IAhBC;;;;OAIG;IACH,4CAAe,GAAf;QACE,OAAO,eAAe,CAAC,mBAAmB,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,2CAAc,GAAd;QACE,OAAO,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC7C,CAAC;IACH,yBAAC;AAAD,CAAC,AAjBD,IAiBC;;AAED,IAAM,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;AAEzD,SAAS,mBAAmB,CAAC,KAAa;IACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAClC,wDAAwD;QACxD,gIAAgI;QAChI,aAAa,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,SAAA,CAAC,EAAI,EAAE,CAAA,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;KACrE;IAED,OAAO,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AACjD,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '@opentelemetry/core';\n\nimport {\n  generateTraceId,\n  generateSpanId,\n  TRACE_ID_BYTES,\n} from '../../internal/xray-id-generation';\n\n/**\n * IdGenerator that generates trace IDs conforming to AWS X-Ray format.\n * https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\n */\nexport class AWSXRayIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits. The first 4 bytes correspond to the current\n   * time, in seconds, as per X-Ray trace ID format.\n   */\n  generateTraceId(): string {\n    return generateTraceId(generateRandomBytes);\n  }\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId(): string {\n    return generateSpanId(generateRandomBytes);\n  }\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\n\nfunction generateRandomBytes(bytes: number): string {\n  for (let i = 0; i < bytes / 4; i++) {\n    // unsigned right shift drops decimal part of the number\n    // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n    SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n  }\n\n  return SHARED_BUFFER.toString('hex', 0, bytes);\n}\n"]}