{"version":3,"file":"AWSXRayLambdaPropagator.js","sourceRoot":"","sources":["../../src/AWSXRayLambdaPropagator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAKL,kBAAkB,EAClB,oBAAoB,EACpB,KAAK,GACN,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,iBAAiB,EACjB,uBAAuB,GACxB,MAAM,oCAAoC,CAAC;AAE5C,MAAM,CAAC,IAAM,wBAAwB,GAAG,kBAAkB,CAAC;AAE3D;;;;;;GAMG;AACH;IAAA;QACU,uBAAkB,GAAG,IAAI,iBAAiB,EAAE,CAAC;IAiCvD,CAAC;IA/BC,wCAAM,GAAN,UAAO,OAAgB,EAAE,OAAgB,EAAE,MAAqB;QAC9D,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC;IAED,yCAAO,GAAP,UAAQ,OAAgB,EAAE,OAAgB,EAAE,MAAqB;;QAC/D,IAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CACjD,OAAO,EACP,OAAO,EACP,MAAM,CACP,CAAC;QAEF,IAAM,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,WAAW,IAAI,kBAAkB,CAAC,WAAW,CAAC,EAAE;YAClD,OAAO,WAAW,CAAC;SACpB;QAED,IAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACzD,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,WAAW,CAAC;SACpB;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CACpC,WAAW,YACT,GAAC,uBAAuB,IAAG,UAAU,OACvC,oBAAoB,CACrB,CAAC;IACJ,CAAC;IAED,wCAAM,GAAN;QACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;IAC1C,CAAC;IACH,8BAAC;AAAD,CAAC,AAlCD,IAkCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapPropagator,\n  TextMapSetter,\n  TextMapGetter,\n  isSpanContextValid,\n  defaultTextMapGetter,\n  trace,\n} from '@opentelemetry/api';\nimport {\n  AWSXRayPropagator,\n  AWSXRAY_TRACE_ID_HEADER,\n} from '@opentelemetry/propagator-aws-xray';\n\nexport const AWSXRAY_TRACE_ID_ENV_VAR = '_X_AMZN_TRACE_ID';\n\n/**\n * Implementation of the AWS X-Ray Trace Header propagation protocol with special\n * logic for handling Lambda X-ray environment variable.\n *\n * An example AWS Xray Tracing Header is shown below:\n * X-Amzn-Trace-Id: Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1\n */\nexport class AWSXRayLambdaPropagator implements TextMapPropagator {\n  private _awsXrayPropagator = new AWSXRayPropagator();\n\n  inject(context: Context, carrier: unknown, setter: TextMapSetter) {\n    this._awsXrayPropagator.inject(context, carrier, setter);\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const xrayContext = this._awsXrayPropagator.extract(\n      context,\n      carrier,\n      getter\n    );\n\n    const spanContext = trace.getSpanContext(context);\n    if (spanContext && isSpanContextValid(spanContext)) {\n      return xrayContext;\n    }\n\n    const xrayEnvVar = process.env[AWSXRAY_TRACE_ID_ENV_VAR];\n    if (!xrayEnvVar) {\n      return xrayContext;\n    }\n\n    return this._awsXrayPropagator.extract(\n      xrayContext,\n      { [AWSXRAY_TRACE_ID_HEADER]: xrayEnvVar },\n      defaultTextMapGetter\n    );\n  }\n\n  fields(): string[] {\n    return this._awsXrayPropagator.fields();\n  }\n}\n"]}