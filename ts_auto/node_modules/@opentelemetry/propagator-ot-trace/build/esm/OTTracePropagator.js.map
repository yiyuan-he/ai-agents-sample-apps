{"version":3,"file":"OTTracePropagator.js","sourceRoot":"","sources":["../../src/OTTracePropagator.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Baggage,\n  Context,\n  trace,\n  propagation,\n  isSpanContextValid,\n  isValidSpanId,\n  isValidTraceId,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  TraceFlags,\n} from '@opentelemetry/api';\n\n/** OT header keys */\nexport const OT_TRACE_ID_HEADER = 'ot-tracer-traceid';\nexport const OT_SPAN_ID_HEADER = 'ot-tracer-spanid';\nexport const OT_SAMPLED_HEADER = 'ot-tracer-sampled';\nexport const OT_BAGGAGE_PREFIX = 'ot-baggage-';\n\nconst FIELDS = [OT_TRACE_ID_HEADER, OT_SPAN_ID_HEADER, OT_SAMPLED_HEADER];\nconst PADDING = '0'.repeat(16);\n\nfunction readHeader(\n  carrier: unknown,\n  getter: TextMapGetter,\n  key: string\n): string {\n  let header = getter.get(carrier, key);\n  if (Array.isArray(header)) [header] = header;\n  return header || '';\n}\n\nconst VALID_HEADER_NAME_CHARS = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/;\n\nfunction isValidHeaderName(name: string): boolean {\n  return VALID_HEADER_NAME_CHARS.test(name);\n}\n\nconst INVALID_HEADER_VALUE_CHARS = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction isValidHeaderValue(value: string): boolean {\n  return !INVALID_HEADER_VALUE_CHARS.test(value);\n}\n\n/**\n * Propagator for the ot-trace HTTP format from OpenTracing.\n */\nexport class OTTracePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter) {\n    const spanContext = trace.getSpan(context)?.spanContext();\n    if (!spanContext || !isSpanContextValid(spanContext)) return;\n\n    setter.set(carrier, OT_TRACE_ID_HEADER, spanContext.traceId.substring(16));\n    setter.set(carrier, OT_SPAN_ID_HEADER, spanContext.spanId);\n    setter.set(\n      carrier,\n      OT_SAMPLED_HEADER,\n      (spanContext.traceFlags & TraceFlags.SAMPLED) === TraceFlags.SAMPLED\n        ? 'true'\n        : 'false'\n    );\n\n    const baggage = propagation.getBaggage(context);\n    if (!baggage) return;\n    baggage.getAllEntries().forEach(([k, v]) => {\n      if (!isValidHeaderName(k) || !isValidHeaderValue(v.value)) return;\n      setter.set(carrier, `${OT_BAGGAGE_PREFIX}${k}`, v.value);\n    });\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    let traceId = readHeader(carrier, getter, OT_TRACE_ID_HEADER);\n    if (traceId.length === 16) traceId = `${PADDING}${traceId}`;\n    const spanId = readHeader(carrier, getter, OT_SPAN_ID_HEADER);\n    const sampled = readHeader(carrier, getter, OT_SAMPLED_HEADER);\n    const traceFlags =\n      sampled === 'true' ? TraceFlags.SAMPLED : TraceFlags.NONE;\n\n    if (isValidTraceId(traceId) && isValidSpanId(spanId)) {\n      context = trace.setSpan(\n        context,\n        trace.wrapSpanContext({\n          traceId,\n          spanId,\n          isRemote: true,\n          traceFlags,\n        })\n      );\n\n      let baggage: Baggage =\n        propagation.getBaggage(context) || propagation.createBaggage();\n\n      getter.keys(carrier).forEach(k => {\n        if (!k.startsWith(OT_BAGGAGE_PREFIX)) return;\n        const value = readHeader(carrier, getter, k);\n        baggage = baggage.setEntry(k.substring(OT_BAGGAGE_PREFIX.length), {\n          value,\n        });\n      });\n\n      if (baggage.getAllEntries().length > 0) {\n        context = propagation.setBaggage(context, baggage);\n      }\n    }\n\n    return context;\n  }\n\n  /**\n   * Note: fields does not include baggage headers as they are dependent on\n   * carrier instance. Attempting to reuse a carrier by clearing fields could\n   * result in a memory leak.\n   */\n  fields(): string[] {\n    return FIELDS.slice();\n  }\n}\n"]}