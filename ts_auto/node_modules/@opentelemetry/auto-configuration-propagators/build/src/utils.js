"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropagator = void 0;
const api_1 = require("@opentelemetry/api");
const core_1 = require("@opentelemetry/core");
const propagator_b3_1 = require("@opentelemetry/propagator-b3");
const propagator_jaeger_1 = require("@opentelemetry/propagator-jaeger");
const propagator_ot_trace_1 = require("@opentelemetry/propagator-ot-trace");
const propagator_aws_xray_1 = require("@opentelemetry/propagator-aws-xray");
const propagator_aws_xray_lambda_1 = require("@opentelemetry/propagator-aws-xray-lambda");
const propagatorMap = new Map([
    ['tracecontext', () => new core_1.W3CTraceContextPropagator()],
    ['baggage', () => new core_1.W3CBaggagePropagator()],
    [
        'b3',
        () => new propagator_b3_1.B3Propagator({ injectEncoding: propagator_b3_1.B3InjectEncoding.SINGLE_HEADER }),
    ],
    [
        'b3multi',
        () => new propagator_b3_1.B3Propagator({ injectEncoding: propagator_b3_1.B3InjectEncoding.MULTI_HEADER }),
    ],
    ['jaeger', () => new propagator_jaeger_1.JaegerPropagator()],
    ['xray', () => new propagator_aws_xray_1.AWSXRayPropagator()],
    ['xray-lambda', () => new propagator_aws_xray_lambda_1.AWSXRayLambdaPropagator()],
    ['ottrace', () => new propagator_ot_trace_1.OTTracePropagator()],
]);
/**
 * Get a propagator based on the OTEL_PROPAGATORS env var.
 */
function getPropagator() {
    var _a;
    if (process.env.OTEL_PROPAGATORS == null ||
        process.env.OTEL_PROPAGATORS.trim() === '') {
        return new core_1.CompositePropagator({
            propagators: [
                new core_1.W3CTraceContextPropagator(),
                new core_1.W3CBaggagePropagator(),
            ],
        });
    }
    const propagatorsFromEnv = Array.from(new Set((_a = process.env.OTEL_PROPAGATORS) === null || _a === void 0 ? void 0 : _a.split(',').map(value => value.toLowerCase().trim())));
    const propagators = propagatorsFromEnv.flatMap(propagatorName => {
        if (propagatorName === 'none') {
            api_1.diag.info('Not selecting any propagator for value "none" specified in the environment variable OTEL_PROPAGATORS');
            return [];
        }
        const propagatorFactoryFunction = propagatorMap.get(propagatorName);
        if (propagatorFactoryFunction == null) {
            api_1.diag.warn(`Invalid propagator "${propagatorName}" specified in the environment variable OTEL_PROPAGATORS`);
            return [];
        }
        return propagatorFactoryFunction();
    });
    return new core_1.CompositePropagator({ propagators });
}
exports.getPropagator = getPropagator;
//# sourceMappingURL=utils.js.map