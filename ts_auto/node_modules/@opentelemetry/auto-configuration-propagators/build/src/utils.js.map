{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAA6D;AAC7D,8CAI6B;AAC7B,gEAA8E;AAC9E,wEAAoE;AACpE,4EAAuE;AACvE,4EAAuE;AACvE,0FAAoF;AAIpF,MAAM,aAAa,GAAG,IAAI,GAAG,CAAoC;IAC/D,CAAC,cAAc,EAAE,GAAG,EAAE,CAAC,IAAI,gCAAyB,EAAE,CAAC;IACvD,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,2BAAoB,EAAE,CAAC;IAC7C;QACE,IAAI;QACJ,GAAG,EAAE,CAAC,IAAI,4BAAY,CAAC,EAAE,cAAc,EAAE,gCAAgB,CAAC,aAAa,EAAE,CAAC;KAC3E;IACD;QACE,SAAS;QACT,GAAG,EAAE,CAAC,IAAI,4BAAY,CAAC,EAAE,cAAc,EAAE,gCAAgB,CAAC,YAAY,EAAE,CAAC;KAC1E;IACD,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,oCAAgB,EAAE,CAAC;IACxC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,uCAAiB,EAAE,CAAC;IACvC,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,oDAAuB,EAAE,CAAC;IACpD,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,uCAAiB,EAAE,CAAC;CAC3C,CAAC,CAAC;AAEH;;GAEG;AACH,SAAgB,aAAa;;IAC3B,IACE,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,IAAI;QACpC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE,EAC1C;QACA,OAAO,IAAI,0BAAmB,CAAC;YAC7B,WAAW,EAAE;gBACX,IAAI,gCAAyB,EAAE;gBAC/B,IAAI,2BAAoB,EAAE;aAC3B;SACF,CAAC,CAAC;KACJ;IAED,MAAM,kBAAkB,GAAG,KAAK,CAAC,IAAI,CACnC,IAAI,GAAG,CACL,MAAA,OAAO,CAAC,GAAG,CAAC,gBAAgB,0CAAE,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CACnD,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAC3B,CACF,CACF,CAAC;IAEF,MAAM,WAAW,GAAG,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;QAC9D,IAAI,cAAc,KAAK,MAAM,EAAE;YAC7B,UAAI,CAAC,IAAI,CACP,sGAAsG,CACvG,CAAC;YACF,OAAO,EAAE,CAAC;SACX;QAED,MAAM,yBAAyB,GAAG,aAAa,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACpE,IAAI,yBAAyB,IAAI,IAAI,EAAE;YACrC,UAAI,CAAC,IAAI,CACP,uBAAuB,cAAc,0DAA0D,CAChG,CAAC;YACF,OAAO,EAAE,CAAC;SACX;QACD,OAAO,yBAAyB,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,OAAO,IAAI,0BAAmB,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;AAClD,CAAC;AAxCD,sCAwCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, TextMapPropagator } from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n} from '@opentelemetry/core';\nimport { B3InjectEncoding, B3Propagator } from '@opentelemetry/propagator-b3';\nimport { JaegerPropagator } from '@opentelemetry/propagator-jaeger';\nimport { OTTracePropagator } from '@opentelemetry/propagator-ot-trace';\nimport { AWSXRayPropagator } from '@opentelemetry/propagator-aws-xray';\nimport { AWSXRayLambdaPropagator } from '@opentelemetry/propagator-aws-xray-lambda';\n\ntype PropagatorFactoryFunction = () => TextMapPropagator;\n\nconst propagatorMap = new Map<string, PropagatorFactoryFunction>([\n  ['tracecontext', () => new W3CTraceContextPropagator()],\n  ['baggage', () => new W3CBaggagePropagator()],\n  [\n    'b3',\n    () => new B3Propagator({ injectEncoding: B3InjectEncoding.SINGLE_HEADER }),\n  ],\n  [\n    'b3multi',\n    () => new B3Propagator({ injectEncoding: B3InjectEncoding.MULTI_HEADER }),\n  ],\n  ['jaeger', () => new JaegerPropagator()],\n  ['xray', () => new AWSXRayPropagator()],\n  ['xray-lambda', () => new AWSXRayLambdaPropagator()],\n  ['ottrace', () => new OTTracePropagator()],\n]);\n\n/**\n * Get a propagator based on the OTEL_PROPAGATORS env var.\n */\nexport function getPropagator(): TextMapPropagator {\n  if (\n    process.env.OTEL_PROPAGATORS == null ||\n    process.env.OTEL_PROPAGATORS.trim() === ''\n  ) {\n    return new CompositePropagator({\n      propagators: [\n        new W3CTraceContextPropagator(),\n        new W3CBaggagePropagator(),\n      ],\n    });\n  }\n\n  const propagatorsFromEnv = Array.from(\n    new Set(\n      process.env.OTEL_PROPAGATORS?.split(',').map(value =>\n        value.toLowerCase().trim()\n      )\n    )\n  );\n\n  const propagators = propagatorsFromEnv.flatMap(propagatorName => {\n    if (propagatorName === 'none') {\n      diag.info(\n        'Not selecting any propagator for value \"none\" specified in the environment variable OTEL_PROPAGATORS'\n      );\n      return [];\n    }\n\n    const propagatorFactoryFunction = propagatorMap.get(propagatorName);\n    if (propagatorFactoryFunction == null) {\n      diag.warn(\n        `Invalid propagator \"${propagatorName}\" specified in the environment variable OTEL_PROPAGATORS`\n      );\n      return [];\n    }\n    return propagatorFactoryFunction();\n  });\n\n  return new CompositePropagator({ propagators });\n}\n"]}